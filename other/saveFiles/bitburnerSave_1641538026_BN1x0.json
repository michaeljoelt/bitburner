{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1899,\"hp\":10,\"max_hp\":10,\"strength\":5,\"defense\":7,\"dexterity\":15,\"agility\":15,\"charisma\":52,\"intelligence\":0,\"hacking_chance_mult\":1.061520150601,\"hacking_speed_mult\":1.061520150601,\"hacking_money_mult\":1.061520150601,\"hacking_grow_mult\":1.061520150601,\"hacking_exp\":1.0000000000000002e+27,\"strength_exp\":74.62486658725045,\"defense_exp\":104.5597348341978,\"dexterity_exp\":281.51514393938527,\"agility_exp\":282.36436005986604,\"charisma_exp\":1928.717148610199,\"intelligence_exp\":0,\"hacking_mult\":1.061520150601,\"strength_mult\":1.061520150601,\"defense_mult\":1.061520150601,\"dexterity_mult\":1.061520150601,\"agility_mult\":1.061520150601,\"charisma_mult\":1.061520150601,\"hacking_exp_mult\":1.061520150601,\"strength_exp_mult\":1.061520150601,\"defense_exp_mult\":1.061520150601,\"dexterity_exp_mult\":1.061520150601,\"agility_exp_mult\":1.061520150601,\"charisma_exp_mult\":1.061520150601,\"company_rep_mult\":1.061520150601,\"faction_rep_mult\":1.061520150601,\"money\":22604351786390.42,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Alpha Enterprises\":\"Software Engineering Intern\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-7\",\"pserv-20\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-14\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":704440.2000041994,\"ram\":64,\"totalMoneyGenerated\":1779492515.9141285,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":704419.2000042002,\"ram\":64,\"totalMoneyGenerated\":1779455090.5363734,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71935.99999987961,\"ram\":64,\"totalMoneyGenerated\":1764251655.567692,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71935.19999987961,\"ram\":64,\"totalMoneyGenerated\":1764236762.5815732,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71934.3999998796,\"ram\":64,\"totalMoneyGenerated\":1764263482.5305774,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71933.79999987961,\"ram\":64,\"totalMoneyGenerated\":1764269512.9415627,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71927.79999987961,\"ram\":64,\"totalMoneyGenerated\":1764294536.680986,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71927.19999987961,\"ram\":64,\"totalMoneyGenerated\":1764262105.9850452,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71926.59999987962,\"ram\":64,\"totalMoneyGenerated\":1764300153.0210254,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71925.99999987961,\"ram\":64,\"totalMoneyGenerated\":1764307425.87785,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71913.3999998796,\"ram\":64,\"totalMoneyGenerated\":1764322946.4081275,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71912.7999998796,\"ram\":64,\"totalMoneyGenerated\":1764311561.9277847,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71912.19999987961,\"ram\":64,\"totalMoneyGenerated\":1764326840.8062546,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71911.5999998796,\"ram\":64,\"totalMoneyGenerated\":1764334273.4951036,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71910.99999987961,\"ram\":64,\"totalMoneyGenerated\":1764370498.5600421,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71910.19999987961,\"ram\":64,\"totalMoneyGenerated\":1764347507.554909,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71909.5999998796,\"ram\":64,\"totalMoneyGenerated\":1764375410.9500337,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71908.99999987961,\"ram\":64,\"totalMoneyGenerated\":1764386191.509458,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71908.3999998796,\"ram\":64,\"totalMoneyGenerated\":1764421014.2965326,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71907.7999998796,\"ram\":64,\"totalMoneyGenerated\":1764410069.086028,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71820.99999987958,\"ram\":64,\"totalMoneyGenerated\":1762709763.6606905,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71820.59999987959,\"ram\":64,\"totalMoneyGenerated\":1762702646.6200101,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71819.99999987958,\"ram\":64,\"totalMoneyGenerated\":1762724849.4764838,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71819.59999987959,\"ram\":64,\"totalMoneyGenerated\":1762727816.2737637,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71818.39999987959,\"ram\":64,\"totalMoneyGenerated\":1762744887.1053267,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71817.99999987958,\"ram\":64,\"totalMoneyGenerated\":1762738409.392743,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71817.39999987959,\"ram\":64,\"totalMoneyGenerated\":1762735563.274166,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71816.99999987958,\"ram\":64,\"totalMoneyGenerated\":1762754398.413667,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71816.39999987959,\"ram\":64,\"totalMoneyGenerated\":1762750629.5132987,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":71815.79999987959,\"ram\":64,\"totalMoneyGenerated\":1762768988.3694305,\"name\":\"hacknet-node-29\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"The Black Hand\",\"Aevum\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-1.6,\"crime_money_mult\":1.061520150601,\"crime_success_mult\":1.061520150601,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.061520150601,\"hacknet_node_money_mult\":2.6772533373298413,\"hacknet_node_purchase_cost_mult\":0.7202323142917649,\"hacknet_node_ram_cost_mult\":0.9414801494009999,\"hacknet_node_core_cost_mult\":0.9414801494009999,\"hacknet_node_level_cost_mult\":0.80025812699085,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641538025653,\"totalPlaytime\":1227444800,\"playtimeSinceLastAug\":706209000,\"playtimeSinceLastBitnode\":1227444800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-33251.99999999959,\"codingcontract\":0,\"corporation\":0,\"crime\":992521.3408119349,\"gang\":0,\"hacking\":6802998385724.066,\"hacknet\":52944097506.55744,\"hacknet_expenses\":-99163521650.63858,\"hospitalization\":-4908000,\"infiltration\":0,\"sleeves\":0,\"stock\":38961181198.03331,\"total\":22604351785390.42,\"work\":3812672.6462657913,\"servers\":-668378065708426,\"other\":1006999999000000,\"augmentations\":-322813321513342.1}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-792611.9999999726,\"codingcontract\":0,\"corporation\":0,\"crime\":992521.3408119349,\"gang\":0,\"hacking\":6803254102660.2295,\"hacknet\":56784428248.60572,\"hacknet_expenses\":-99826406416.10703,\"hospitalization\":-4908000,\"infiltration\":0,\"sleeves\":0,\"stock\":38961181198.03331,\"total\":22605351518728.17,\"work\":3848213.646265653,\"servers\":-668378531138385.8,\"other\":1006999993800000,\"augmentations\":-322815283589138.3}},\"scriptProdSinceLastAug\":6653490865305.306,\"exploits\":[\"YoureNotMeantToAccessThis\"],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"11.9.2.0\",\"isConnectedTo\":true,\"maxRam\":2097152,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe-1.11%-INC\"],\"ramUsed\":65512.19999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[5859780003,1782,4455,1782]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":70194.57078321227,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.49599999999,\"onlineExpGained\":254494.4803320065,\"onlineMoneyMade\":5859780003,\"onlineRunningTime\":9338.409999998916,\"pid\":1,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[5873873000,1782,4455,1782]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":17820.410940162463,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.51,\"onlineExpGained\":211074.34283589636,\"onlineMoneyMade\":5873873000,\"onlineRunningTime\":9338.409999998916,\"pid\":2,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[50302843074,5346,6237,3564]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":208818.11607764245,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.518000000004,\"onlineExpGained\":334778.001299482,\"onlineMoneyMade\":50302843074,\"onlineRunningTime\":9338.409999998916,\"pid\":3,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,891,4455,2673]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":119996.1297385046,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.53100000001,\"onlineExpGained\":223245.5240514644,\"onlineMoneyMade\":0,\"onlineRunningTime\":9338.409999998916,\"pid\":4,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[12684213600,891,5346,891]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":96784.35294385733,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.54000000001,\"onlineExpGained\":169841.93834855314,\"onlineMoneyMade\":12684213600,\"onlineRunningTime\":9338.409999998916,\"pid\":5,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[18371965725,2673,5346,3564]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":104910.86372885821,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.549,\"onlineExpGained\":270824.28776469856,\"onlineMoneyMade\":18371965725,\"onlineRunningTime\":9338.409999998916,\"pid\":6,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[10730422593,1782,6237,3564]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":174870.28426940244,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.557,\"onlineExpGained\":242195.9350463029,\"onlineMoneyMade\":10730422593,\"onlineRunningTime\":9338.409999998916,\"pid\":7,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[4598908375,2673,6237,2673]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88975.15347249512,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.564999999995,\"onlineExpGained\":201441.54350119666,\"onlineMoneyMade\":4598908375,\"onlineRunningTime\":9338.409999998916,\"pid\":8,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[9872417214,2673,3564,1782]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":150128.75566573133,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.569,\"onlineExpGained\":154780.91733257513,\"onlineMoneyMade\":9872417214,\"onlineRunningTime\":9338.409999998916,\"pid\":9,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,87318,0,32076]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":84802.68361125,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.581,\"onlineExpGained\":183768.75,\"onlineMoneyMade\":0,\"onlineRunningTime\":9338.409999998916,\"pid\":10,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[22844381967,1782,4455,2673]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":91462.24543858501,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.589,\"onlineExpGained\":177114.49821549302,\"onlineMoneyMade\":22844381967,\"onlineRunningTime\":9338.409999998916,\"pid\":11,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[9157946850,7128,26730,11583]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":295019.1748365519,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.597,\"onlineExpGained\":567719.1839842909,\"onlineMoneyMade\":9157946850,\"onlineRunningTime\":9338.409999998916,\"pid\":12,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[3375000000,8019,32076,16038]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":342024.08431908354,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.609000000004,\"onlineExpGained\":665527.1402163306,\"onlineMoneyMade\":3375000000,\"onlineRunningTime\":9338.409999998916,\"pid\":13,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[5226405959.674032,19602,68607,27621]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":493897.6637067667,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.616,\"onlineExpGained\":1016355.2087824997,\"onlineMoneyMade\":5226405959.674032,\"onlineRunningTime\":9338.409999998916,\"pid\":14,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[1464360325,4455,13365,6237]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":143999.5941649249,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.622,\"onlineExpGained\":350509.68576879764,\"onlineMoneyMade\":1464360325,\"onlineRunningTime\":9338.409999998916,\"pid\":15,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[8613067200,2673,9801,891]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":79077.72824300588,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.636000000006,\"onlineExpGained\":211558.80077968913,\"onlineMoneyMade\":8613067200,\"onlineRunningTime\":9338.409999998916,\"pid\":16,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,99792,0,51678]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":121417.64569687498,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.641,\"onlineExpGained\":239233.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9338.409999998916,\"pid\":17,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,1782,5346,2673]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":197171.00541738115,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.647,\"onlineExpGained\":205649.34365539608,\"onlineMoneyMade\":0,\"onlineRunningTime\":9338.409999998916,\"pid\":18,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,20493,32967,26730]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":258902.98799407072,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.652,\"onlineExpGained\":742262.2388857299,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":9338.409999998916,\"pid\":19,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1500000000,17820,33858,22275]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":245584.18746952855,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.670000000006,\"onlineExpGained\":727612.3262761431,\"onlineMoneyMade\":1500000000,\"onlineRunningTime\":9338.409999998916,\"pid\":20,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[3250000000,16929,48114,30294]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":249513.9641759024,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.677,\"onlineExpGained\":715436.2907759338,\"onlineMoneyMade\":3250000000,\"onlineRunningTime\":9338.409999998916,\"pid\":21,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[3000000000,8019,19602,12474]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":166892.8664769387,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.681000000004,\"onlineExpGained\":478172.8612478678,\"onlineMoneyMade\":3000000000,\"onlineRunningTime\":9338.409999998916,\"pid\":22,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,32967,0,48114]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88474.7221875,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.692,\"onlineExpGained\":187110,\"onlineMoneyMade\":0,\"onlineRunningTime\":9338.409999998916,\"pid\":23,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[500000000,89991,143451,118503]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":781545.3978444804,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.69700000001,\"onlineExpGained\":2253710.930507219,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":9338.409999998916,\"pid\":24,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[994000000,506088,505197,251262]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1735982.947996704,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.701,\"onlineExpGained\":4189706.7244743505,\"onlineMoneyMade\":994000000,\"onlineRunningTime\":9338.409999998916,\"pid\":25,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[292193362.2509288,272646,344817,309177]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1832279.0024586304,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.708999999995,\"onlineExpGained\":4491011.340483481,\"onlineMoneyMade\":292193362.2509288,\"onlineRunningTime\":9338.409999998916,\"pid\":26,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[402500000,147015,211167,179982]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1005434.4182385743,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.71400000001,\"onlineExpGained\":2675320.2525211475,\"onlineMoneyMade\":402500000,\"onlineRunningTime\":9338.409999998916,\"pid\":27,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[481250000,48114,88209,68607]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":538751.1112565434,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.719,\"onlineExpGained\":1627837.911397028,\"onlineMoneyMade\":481250000,\"onlineRunningTime\":9338.409999998916,\"pid\":28,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[525000000,30294,68607,51678]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":402538.9805523911,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.724,\"onlineExpGained\":1032445.5915313716,\"onlineMoneyMade\":525000000,\"onlineRunningTime\":9338.409999998916,\"pid\":29,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1100000000,22275,66825,46332]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":431192.366640869,\"offlineMoneyMade\":0,\"offlineRunningTime\":62938.73100000001,\"onlineExpGained\":982209.1449635702,\"onlineMoneyMade\":1100000000,\"onlineRunningTime\":9338.409999998916,\"pid\":30,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":891,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///20c130bb-303b-4d98-9b28-ff9fd2184fc9\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stocks.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":1844.943,\"onlineExpGained\":0,\"onlineMoneyMade\":985807838738.8141,\"onlineRunningTime\":8069.009999994857,\"pid\":31,\"ramUsage\":23.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n\\tvar scriptName = \\\"autoHack.js\\\";\\n\\tvar vers = \\\"v1\\\";\\n\\tvar host = ns.getHostname();\\n\\tvar scriptRam = 2.6;\\n\\tns.tprint(\\\"script to copy/run = \\\" + scriptName + \\\"(ram: \\\" + scriptRam + \\\")\\\");\\n\\n\\tif (ns.args.length > 0) {\\n\\t\\tvar targets = ns.args;\\n\\t}\\n\\telse {\\n\\t\\tvar allServers = ns.scan();\\n\\t\\tvar targets = [];\\n\\n\\t\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\t\\tvar server = allServers[i];\\n\\t\\t\\tif (!server.startsWith(\\\"pserv\\\") && !server.startsWith(\\\"undefined\\\")) {\\n\\t\\t\\t\\ttargets.push(server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tif (ns.getServerNumPortsRequired(target) == 0) {\\n\\t\\t\\tns.kill(scriptName, target);\\n\\t\\t\\tvar targetRam = ns.getServerMaxRam(target) - ns.getServerUsedRam(target);\\n\\t\\t\\tawait ns.scp(scriptName, target);\\n\\t\\t\\tvar threads = Math.floor(targetRam / scriptRam);\\n\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": nuking \\\" + target);\\n\\t\\t\\tns.nuke(target);\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running \\\" + scriptName + \\\" on \\\" + target);\\n\\t\\t\\t\\tns.exec(scriptName, target, threads);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\"not enough ram (\\\" + targetRam + \\\")\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\t\\tawait ns.sleep(100000)\\n}\",\"filename\":\"copyRun_autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"copyRun_autoHack.js\",\"url\":\"blob:file:///a25a3362-bb32-4744-8ec1-33d8698ce906\"}],\"ramUsage\":4.5,\"server\":\"home\",\"_hash\":\"4a0216f1dd08791fd89bc8aa70b1057f7bda35127a6fb1b9075ce8ec33f007c1\",\"moduleSequenceNumber\":75}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tvar targets = ns.args;\\n\\tns.tprint(\\\"targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tns.killall(target);\\n\\t}\\n}\",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:file:///17f0e10c-fa86-4cbc-a924-03a0c099c743\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"956f6d943689d201d62a4cd91cc22925f64cca50a178a48668eab3640ed9ca29\",\"moduleSequenceNumber\":76}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var base = ns.getServer;\\n\\tns.print(\\\"base = \\\" + base);\\n\\n\\tvar scriptName = \\\"copyRun_autoHack.js\\\";\\n\\tvar scriptRam = 2.6;//ns.getScriptRam(scriptName,base);\\n\\tns.print(\\\"script to copy/run = \\\" + scriptName + \\\"(ram: \\\" + scriptRam + \\\")\\\");\\n\\nif(ns.args.length>0){\\n\\tvar targets = ns.args;\\n}\\nelse{\\n\\tvar targets = ns.scan();\\n}\\n\\tns.print(\\\"targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tns.kill(scriptName, target);\\n\\t\\tvar targetRam = ns.getServerMaxRam(target)-ns.getServerUsedRam;\\n\\t\\tawait ns.scp(scriptName, target);\\n\\t\\tvar threads = Math.floor(targetRam / scriptRam);\\n\\t\\tns.print(\\\"nuking\\\");\\n\\t\\tif(threads>0){\\n\\t\\tns.print(\\\"running \\\"+scriptName);\\n\\t\\tns.exec(\\\"NUKE.exe\\\", target); //ns.connect(targets[i]);)\\n\\t\\tns.exec(scriptName,target, threads);\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tns.print(\\\"not enough available ram (\\\"+targetRam+\\\")\\\")\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"spread.js\",\"url\":\"blob:file:///dc846edf-f0bc-43c8-bc3e-872a5e1f3bda\"}],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"bc7ab2d6e95a0bb6c5103c55da2e3386abf6de5530b050dd7993acbdac26f440\",\"moduleSequenceNumber\":77}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: updateServerScripts.js \\nLast updated: 2022-01-06-2200\\n\\nDescription: \\n- set ups autoHack.js on each purchased server (if they start with \\\"pserv\\\")\\n- without arguments, just hacks joesguns. otherwise hacks each argument/server\\n- use run startup.js to automatically determine which servers to hack (run updateServerScripts within it)\\n*/\\nexport async function main(ns) {\\n\\n\\tlet script = \\\"autoHack.js\\\";\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet targets = [\\\"joesguns\\\"];\\n\\n\\tif (ns.args.length > 0) {\\n\\t\\tlet arg = ns.args + \\\"\\\";\\n\\t\\tlet potentialTargets = arg.split(\\\" \\\");\\n\\t\\ttargets = [];\\n\\t\\tfor (let i = 0; i < potentialTargets.length; i++) {\\n\\t\\t\\tif (ns.serverExists(potentialTargets[i]) && ns.hasRootAccess(potentialTargets[i]) && (ns.getServerRequiredHackingLevel(potentialTargets[i]) <= ns.getHackingLevel())) {\\n\\t\\t\\t\\ttargets.push(potentialTargets[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tlet allServers = ns.scan();\\n\\tlet myServers = [];\\n\\n\\n\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\tlet server = allServers[i];\\n\\n\\t\\tif (server.startsWith(\\\"pserv\\\")) {\\n\\t\\t\\tmyServers.push(server);\\n\\t\\t}\\n\\t}\\n\\n\\n\\tns.tprint(\\\"targets = \\\" + targets);\\n\\tns.tprint(\\\"my servers = \\\" + myServers);\\n\\n\\tfor (let i = 0; i < myServers.length; i++) {\\n\\t\\tlet server = myServers[i];\\n\\t\\tns.tprint(\\\"current server = \\\" + server);\\n\\t\\tns.killall(server);\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tlet threads = Math.floor(freeRam / scriptRam / targets.length);\\n\\t\\tif (threads < 1) { threads = 1; }\\n\\t\\tns.tprint(\\\"freeRam:\\\" + freeRam + \\\" ; scriptRam:\\\" + scriptRam + \\\" ; threads to use:\\\" + threads);\\n\\t\\tawait ns.scp(script, \\\"home\\\", server);\\n\\t\\tfor (let c = 0; c < targets.length; c++) {\\n\\t\\t\\tlet target = targets[c];\\n\\t\\t\\tif (!target == \\\" \\\") {\\n\\t\\t\\t\\tns.tprint(\\\"Running \\\" + script + \\\" \\\" + target + \\\" on \\\" + server + \\\"with \\\" + threads + \\\" threads\\\");\\n\\t\\t\\t\\tns.exec(script, server, threads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"updateServerScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"updateServerScripts.js\",\"url\":\"blob:file:///b371b9a5-0737-4779-917a-b3f48a7b6827\"}],\"ramUsage\":4.7,\"server\":\"home\",\"_hash\":\"369512ba67252e6a50876aeb471631b97b719a6528c2ed25bb117b352e56df51\",\"moduleSequenceNumber\":4583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\nName: purchaseServers.js \\nLast updated: 2022-01-02-1741\\n*/\\nexport async function main(ns) {\\n    let script = \\\"autoHack.js\\\";\\n    // How much RAM each purchased server will have. In this case, it'll\\n    // be 8GB.\\n    let ram = 8;\\n \\n    // Iterator we'll use for our loop\\n \\n    let purchaseLimit = ns.getPurchasedServerLimit();\\n    ns.tprint(\\\"purchased server limit: \\\" + purchaseLimit);\\n    let allServers = ns.scan();\\n \\n    let serverCount = 0;\\n    //let targets = []\\n    //ns.tprint(\\\"length: \\\"+targets.length)\\n    for (let i = 0; i < allServers.length; i++) {\\n        let server = allServers[i];\\n        //ns.tprint(\\\"servername \\\"+server);\\n        if (server.startsWith(\\\"pserv\\\")) {\\n            ++serverCount;\\n        }\\n        //else{\\n        // targets = targets +\\\" \\\"+ server;\\n        //}\\n        ns.tprint(\\\"servers owned: \\\" + serverCount);\\n        //   ns.tprint(\\\"targets: \\\"+ targets);\\n    }\\n \\n \\n    ns.tprint(\\\"servers owned: \\\" + serverCount);\\n \\n    // Continuously try to purchase servers until we've reached the maximum\\n    // amount of servers\\n    while (serverCount < purchaseLimit) {\\n        // Check if we have enough money to purchase a server\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") / 2 > ns.getPurchasedServerCost(ram)) {\\n            ns.print(ns.getServerMoneyAvailable(\\\"home\\\") / 2 + \\\">\\\" + ns.getPurchasedServerCost(ram));\\n            // If we have enough money, then:\\n            //  1. Purchase the server\\n            //  2. Copy our hacking script onto the newly-purchased server\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\n            //  4. Increment our iterator to indicate that we've bought a new server\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + serverCount, ram);\\n            ns.print(\\\"purchased \\\" + hostname);\\n            await ns.scp(script, hostname);\\n            //    await ns.scp(\\\"copyRun_autoHack.js\\\", hostname);\\n            //ns.exec(\\\"copyRun_autoHack.js \\\" + targets, hostname, 1);\\n            ns.exec(script, hostname, 1, \\\"joesguns\\\");\\n            ++serverCount;\\n        }\\n        await ns.sleep(1000);\\n    }\\n \\n    // Continuously try to upgrade servers \\n    allServers = ns.scan();\\n    let myServers = [];\\n    for (let i = 0; i < allServers.length; i++) {\\n        let server = allServers[i];\\n        if (server.startsWith(\\\"pserv\\\")) {\\n            myServers.push(server);\\n        }\\n    }\\n \\n    ns.tprint(\\\"checking servers for upgrades: \\\" + myServers);\\n    let maxRam = ns.getPurchasedServerMaxRam();\\n \\n    for (let i = 0; i < myServers.length; i++) {\\n        let server = myServers[i];\\n        let upgradedServer = 0;\\n        ns.tprint(\\\"current server = \\\" + server);\\n \\n        let serverSize = ns.getServerMaxRam(server);\\n        ns.tprint(\\\"serverSize = \\\" + serverSize);\\n        let myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n        ns.tprint(\\\"myMoney = \\\" + myMoney);\\n        for (ram = maxRam; ram > serverSize; ram = ram / 2) {\\n            if ((myMoney / 2) > ns.getPurchasedServerCost(ram)) {\\n                ns.tprint(\\\"cost of server with ram \\\" + ram + \\\": \\\" + ns.getPurchasedServerCost(ram));\\n                ns.tprint((myMoney / 2) + \\\" > \\\" + ns.getPurchasedServerCost(ram));\\n                // let killed = false;\\n                // while (killed != true) {\\n                //     killed = ns.killall(server);\\n                //     //await ns.sleep(500000);\\n                // }\\n                ns.killall(server);\\n                await ns.sleep(10000);\\n                ns.deleteServer(server);\\n                ns.purchaseServer(server, ram);\\n                ns.tprint(server + \\\" upgraded from \\\" + serverSize + \\\" to \\\" + ram);\\n                await ns.scp(script, server);\\n                ns.exec(script, server, ns.getServerMaxRam(server) / 3, \\\"joesguns\\\");\\n                upgradedServer = 1;\\n                break;\\n            }\\n        }\\n \\n        if (upgradedServer != 1) {\\n            ns.tprint(\\\"cannot afford upgrading \\\" + server + \\\" (current RAM: \\\" + serverSize + \\\" current money: \\\" + myMoney + \\\" next upgrade cost\\\" + \\\"(for \\\" + serverSize * 2 + \\\"ram)\\\" + \\\": \\\" + ns.getPurchasedServerCost(serverSize * 2));\\n        }\\n \\n        // if (upgradedServer == 1) {\\n        //     let killed = false;\\n        //     while (killed != true) {\\n        //         killed = ns.killall(server);\\n        //         ns.killall(server);\\n        //         await ns.sleep(500000);\\n        //     }\\n \\n    }\\n    await ns.sleep(1000);\\n}\",\"filename\":\"purchaseServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"purchaseServers.js\",\"url\":\"blob:file:///5048f326-4b2e-475d-adf2-d34f5e071c2a\"}],\"ramUsage\":9.2,\"server\":\"home\",\"_hash\":\"1e5a318258ac9cfae83bb85d4582bc445ee2e9bb5a6ebe0d34fa8cdf7dbc940d\",\"moduleSequenceNumber\":3425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\nName: startup.js \\nLast updated: 2022-01-06-2200\\n*/\\nexport async function main(ns) {\\n    let script = \\\"autoHack.js\\\"; //to run early on (targetting joesguns) while purchasing each server\\n    let postScript = \\\"updateServerScripts.js\\\"; //to run after complete purchases/upgrades\\n    let targets = [];\\n    let earlyGame = true;\\n\\n\\n    // Start other scripts\\n    ns.exec(\\\"purchaseServers.js\\\", \\\"home\\\", 1);\\n    ns.exec(\\\"stocks.js\\\", \\\"home\\\", 1);\\n\\n    // Array of all servers that don't need any ports opened\\n    // to gain root access. These have 16 GB of RAM\\n    let servers0Port = [\\\"joesguns\\\", \\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"];\\n    let servers1Port = [\\\"neo-net\\\", \\\"zer0\\\", \\\"max-hardware\\\", \\\"iron-gym\\\", \\\"CSEC\\\"];\\n    let servers2Port = [\\\"omega-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"crush-fitness\\\", \\\"the-hub\\\", \\\"avmnite-02h\\\", \\\"johnson-ortho\\\"];\\n    let servers3Port = [\\\"netlink\\\", \\\"catalyst\\\", \\\"comptek\\\", \\\"summit-uni\\\", \\\"rothman-uni\\\", \\\"millenium-fitness\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\"];\\n    let servers4Port = [\\\"syscore\\\", \\\"lexo-corp\\\", \\\"aevum-police\\\", \\\"zb-def\\\", \\\"nova-med\\\", \\\"unitalife\\\", \\\"univ-energy\\\", \\\"alpha-ent\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\"];\\n    let servers5Port = [\\\"zb-institute\\\", \\\"galactic-cyber\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"taiyang-digital\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"aerocorp\\\", \\\"defcomm\\\", \\\"solaris\\\", \\\"deltaone\\\"];\\n\\n    // Copy our scripts onto each server that requires 0 ports\\n    // to gain root access. Then use nuke() to gain admin access and\\n    // run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers0Port.length; ++i) {\\n        let serv = servers0Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n        await ns.scp(script, serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 6);\\n    }\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 1 port\\n    // to gain root access. Then use brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers1Port.length; ++i) {\\n        let serv = servers1Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.brutessh(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 2 port\\n    // to gain root access. Then use ftpcrack(), brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers2Port.length; ++i) {\\n        let serv = servers2Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n\\n    // Copy our scripts onto each server that requires 3 port\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers3Port.length; ++i) {\\n        let serv = servers3Port[i];\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.relaysmtp(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 4 port\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers4Port.length; ++i) {\\n        let serv = servers4Port[i];\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.relaysmtp(serv);\\n        ns.httpworm(serv);\\n        ns.nuke(serv);\\n        //ns.kill(postScript + \\\" \\\" + serv);\\n        ns.exec(script, serv, 12);\\n    }\\n\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n}\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///3c2fa51e-97e2-4372-a33a-a50cc2c9814d\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"f498d89514651208639872be757f6b78bc22f0e07f4d1503ce2b30c91357aaa3\",\"moduleSequenceNumber\":4433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nLast updated: 1/2/2022 2:15\\n*/\\n/*recursive code credit: milonti on reddit https://www.reddit.com/r/Bitburner/comments/9uuh3u/recursive_variables/ */\\nexport async function main(ns) {\\n\\tlet scanned = [];\\n\\tfunction recursive(host) {\\n\\t\\tscanned.push(host);\\n\\t\\tlet newScan = ns.scan(host);\\n\\t\\tfor (let x = 0; x < newScan.length; x++) {\\n\\t\\t\\tif (scanned.includes(newScan[x])) continue;\\n\\t\\t\\t//Insert recursing code below\\n\\t\\t\\tif (ns.getServerMaxMoney(host) > 0) {\\n\\t\\t\\t\\tns.tprint(\\\"server: \\\" + host + \\\" ; maxMoney: \\\" + ns.getServerMaxMoney(host));\\n\\t\\t\\t}\\n\\t\\t\\t//Insert recursing code above\\n\\t\\t\\trecursive(newScan[x])\\n\\t\\t}\\n\\t}\\n\\trecursive('home');\\n}\",\"filename\":\"recursiveScan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"recursiveScan.js\",\"url\":\"blob:file:///1b91e9ff-231a-48de-950a-6d85bf4898a0\"}],\"ramUsage\":1.9,\"server\":\"home\",\"_hash\":\"7ee2cca68833127f497e21d9e734303eae6d29dd16d1f3af89d10a2856323d02\",\"moduleSequenceNumber\":81}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nscript: hostsetup.js\\nlast updated: 2022-01-05 0128\\n*/\\nexport async function main(ns) {\\n\\tlet host = \\\"home\\\";\\n\\tif (ns.args.length > 0) {\\n\\t\\thost = ns.args[0];\\n\\t\\tawait ns.scp(\\\"autoHack.js\\\", \\\"home\\\", host);\\n\\t}\\n\\tlet servers0Port = [\\\"joesguns\\\", \\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"];\\n\\tlet servers1Port = [\\\"neo-net\\\", \\\"zer0\\\", \\\"max-hardware\\\", \\\"iron-gym\\\", \\\"CSEC\\\"];\\n\\tlet servers2Port = [\\\"omega-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"crush-fitness\\\", \\\"the-hub\\\", \\\"avmnite-02h\\\", \\\"johnson-ortho\\\"];\\n\\tlet servers3Port = [\\\"netlink\\\", \\\"catalyst\\\", \\\"comptek\\\", \\\"summit-uni\\\", \\\"rothman-uni\\\", \\\"millenium-fitness\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\"];\\n\\tlet servers4Port = [\\\"syscore\\\", \\\"lexo-corp\\\", \\\"aevum-police\\\", \\\"zb-def\\\", \\\"nova-med\\\", \\\"unitalife\\\", \\\"univ-energy\\\", \\\"alpha-ent\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\"];\\n\\tlet servers5Port = [\\\"zb-institute\\\", \\\"galactic-cyber\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"taiyang-digital\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"aerocorp\\\", \\\"defcomm\\\", \\\"solaris\\\", \\\"deltaone\\\"];\\n\\tlet servers = servers5Port.concat(servers4Port).concat(servers3Port).concat(servers2Port).concat(servers1Port).concat(servers0Port);\\n\\tlet hackableServers = [];\\n\\n\\tlet test = ns.getScriptRam(\\\"autoHack.js\\\");\\n\\tns.tprint(test);\\n\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\ttry {\\n\\t\\t\\t//if(servers[i]!=\\\"\\\"){\\n\\t\\t\\tns.exec(\\\"autoHack.js\\\", host, 1, servers[i]);\\n\\t\\t\\tns.kill(\\\"autoHack.js\\\", host, servers[i]);\\n\\t\\t\\tif (ns.hasRootAccess(servers[i]) && ns.getServerRequiredHackingLevel(servers[i]) <= ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers.push(servers[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch (e) {\\n\\t\\t\\tns.tprint(\\\"unhackable server discovered \\\" + servers[i] + \\\"error: \\\" + e);\\n\\t\\t}\\n\\t}\\n\\n\\tlet threads = (ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(\\\"autoHack.js\\\") / hackableServers.length;\\n\\tif (threads < 1) { threads = 1; }\\n\\tns.tprint(\\\"threads for each run: \\\" + threads);\\n\\tns.tprint(\\\"hackable: \\\" + hackableServers);\\n\\n\\tfor (let i = 0; i < hackableServers.length; i++) {\\n\\t\\ttry {\\n\\t\\t\\tns.exec(\\\"autoHack.js\\\", host, threads, hackableServers[i]);\\n\\t\\t}\\n\\t\\tcatch (e) {\\n\\t\\t\\tns.tprint(\\\"error attempting to hack 'hackable' server: \\\" + hackableServers[i] + \\\"error: \\\" + e);\\n\\t\\t}\\n\\t}\\n\\tawait ns.sleep(30000);\\n}\",\"filename\":\"hostsetup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hostsetup.js\",\"url\":\"blob:file:///2b31265f-fef8-4bf4-83d0-82bf723adf29\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"5e1e5b06fc9ba31e7927852998a525a0a57c8e393af4912c676e39c52547ccac\",\"moduleSequenceNumber\":82}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* base code credit: pwillia7 with modifications by JKelsey: https://www.reddit.com/r/Bitburner/comments/rkd3mu/stocksns_basic_stock_market_setup/hpmg8b7/*/\\n\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ************//\\n    var maxSharePer = 0.45                  // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                  //  percent probablity to buy symbol\\n    var stockVolPer = .03                 //   percent stock will move to buy\\n    var moneyKeep = 1000000000           //    min money to keep on hand\\n    var minSharePer = 5                 //     min shares to buy\\n    var orderMax = 1000000000000           //      max money to spend on a single order\\n    var profPer = 0.05                //       min profit percentage to sell\\n    var panicPer = 0.15              //        percentage loss to panic sell at\\n    //******************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            var forecast = ns.stock.getForecast(stock);\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //sell if only 40% chance increase\\n\\t\\tif (ns.stock.getForecast(stock) < 0.4) {\\n\\t\\t\\t//sell stock\\n            ns.toast(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n\\t\\t}     \\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var minBuy = 10000000;\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                if (shares * askPrice > minBuy) {\\n                    ns.stock.buy(stock, Math.min(shares, maxShares));\\n                }\\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///f5afb8f3-e994-465c-a555-fb1a27607933\"}],\"ramUsage\":23.7,\"server\":\"home\",\"_hash\":\"91815d771c77c158aa5623ce679706a09965e1af7bc9c9f0d7c1ab0f63416b12\",\"moduleSequenceNumber\":177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nns.undocumented();\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///bf60c366-d6da-412d-8f51-a9b331e7186b\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6025130b99b87a3321a5dba3f0bd85ad02569317055c210436b1c2b4eb2254df\",\"moduleSequenceNumber\":2902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-0\",\"pserv-1\",\"darkweb\",\"pserv-2\",\"pserv-3\",\"pserv-7\",\"pserv-20\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-14\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.983999999991615,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-299068.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":717442654,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557743.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"7610490238\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581406.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()())))(aa\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412969-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":391184165,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950802.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[3,3],[6,8,6],[9,6,1,3],[2,2,8,1,5],[6,7,1,4,4,2],[4,7,3,9,1,8,3],[8,6,2,2,6,8,1,8],[3,6,4,3,9,9,1,4,6],[3,8,8,3,6,8,3,2,6,4],[7,7,1,1,5,3,3,9,9,1,5],[3,2,9,9,2,3,7,6,8,9,9,3]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"44.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48525661453,\"moneyMax\":1213141536325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804563.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,14],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116715.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,7,8,45,17,28,6,15,47],[39,32,37,7,22,6,50,8,11]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-819275.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,20,27,40,41,16,49,33,32,26,19,4,16,28,50],[44,27,25,39,36,20,23,23,26,48,34,9,15,45,28],[21,2,35,16,41,13,3,19,38,5,43,3,29,14,3],[33,22,14,13,23,12,14,23,23,37,28,34,36,4,21],[20,23,15,50,44,46,48,47,11,6,37,14,42,12,13],[28,22,14,29,18,14,20,26,23,9,35,25,40,2,18],[36,50,46,46,33,30,4,18,12,11,26,3,19,43,29]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"24.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55868972954,\"moneyMax\":1396724323850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1317,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922231.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[10,182,21,98,118,189,47,189,14,157,72],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-586748.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,16],[8,14],[10,19],[15,22],[4,10],[21,24],[3,9],[9,16],[24,28],[23,31],[8,12],[18,21],[8,18],[22,29],[23,25],[11,19],[24,32]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-840056.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":702053152,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"86.5.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":27697494242,\"moneyMax\":692437356050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817189-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,0,9,8,0,0,6,9,9,10,10,6,3,7,2,2,0,10,2,1,0,5,9],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"48.3.0.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":31572310236,\"moneyMax\":789307755900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":74}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-207978.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[22,46,172,24,25,170,93,161,163,110,186,191,85,86,193,106,87,73,54,54,17,39,57,125,116,88,107,152,68,66,143,43,46,184,165,127,4,81,10]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"22.1.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20466391826,\"moneyMax\":511659795650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498200.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[51,2,84,90,141,170,35,153,49,93,29,12,17,187,111,146,161,158,5,167,106,181,169,15,43,10,62,69,128,35,135,89,44,3,100,179,171,5,86,14,43,106,58,135,198,89,167],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-253625-CarmichaelSecurity.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))(()a)((a()()a))))\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-778141-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":261916599,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"22.5.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":19834823591,\"moneyMax\":495870589775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1054,\"serverGrowth\":54}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372337.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,0,0],[0,0,0,0,1,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647918-CarmichaelSecurity.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"22457005717\",8],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45703.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,5],[4,4,8],[6,9,9,7],[9,8,5,8,1],[6,6,8,1,3,5],[5,5,5,3,3,3,4],[2,8,2,5,8,8,9,5]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"26.8.7.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":18944376509,\"moneyMax\":473609412725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":901,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-761249.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,24],[3,4],[8,16],[8,13],[14,17],[6,11],[10,19],[3,11],[10,13],[2,10],[6,15],[18,24],[25,31],[15,21],[24,30],[18,24],[3,10]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"33.8.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":21947904077,\"moneyMax\":548697601925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":966,\"serverGrowth\":79}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123708.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[35],[6],[24],[21],[11],[34],[9],[20],[33],[7],[40]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-857612-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":98,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"39.1.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":26526113030,\"moneyMax\":663152825750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173478-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":50,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"18.1.1.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1522712209,\"moneyMax\":38067805225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1025,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4964-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":8,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"88.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1330,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347134.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[157,47,51,137,106,158,54,60,44],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"52.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1031469439,\"moneyMax\":25786735975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-345426.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,2,8,4,10,1,0,9,10,7,6,0,2,5,5,4,0,1,9,5,8],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813160-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":534426026,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-683064.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"63.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":808389171,\"moneyMax\":20209729275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1030,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498859.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[25,31,19,43,20,49,2,27,4,18,5],[35,17,15,18,38,45,29,22,8,50,19],[3,10,36,28,44,49,48,1,19,23,46],[27,44,12,41,12,13,43,25,5,27,30]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"56.3.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":618093587,\"moneyMax\":15452339675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":44}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760821-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":233781579,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"38.5.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":705082421,\"moneyMax\":17627060525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826604-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24923831\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327011-CarmichaelSecurity.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5951\",30],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-786837-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[51,70,110,111,173,99,169,81,157,167,43,121,198,161,64,124,67,43,74,23,123,86,37,194,104,60,74,10,42,137,37,167],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"79.4.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":780442963,\"moneyMax\":19511074075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":76}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-58927-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[45,122,64,134,53,194,75,58,87,3,16,90,123,182],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258983.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,7,7,9,0,9,0,10,2,6,0,9,8,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"10.1.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":967113752,\"moneyMax\":24177843800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994887.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,-7,9,-4,0,-4,-2,1,-10,3,-7,2,-8],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556254.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[139,186,177,188,20,157,74,2,66,149,28,31,189,193,165,128,144,24,19,58,91,183,161,149,97,30,91,192,99,7,164,168,9,102,54,151,119,154,54,17,94,195],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"63.2.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"univ-energy\":[1795446132,36,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1262.888081293671,\"onlineMoneyMade\":1795446132,\"onlineRunningTime\":821.2100000000498,\"pid\":934,\"ramUsage\":2.45,\"server\":\"univ-energy\",\"threads\":12,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"univ-energy\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28.072000000000003,\"minDifficulty\":28,\"moneyAvailable\":25906862393,\"moneyMax\":27702308525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":802,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-660074-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,3,1,0,2,6,3,10,0,7,3,3,0,3,6,0,1,0,4,5,0,0,8,8,9],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"43.0.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":784318505,\"moneyMax\":19607962625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"53.9.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":537815283,\"moneyMax\":13445382075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":86}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724448-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,26,14,35,39,11,22,50,13,37,37,39,32,18,40],[28,36,9,24,36,15,30,6,29,15,26,8,8,43,4],[26,7,44,23,26,40,37,28,2,40,36,7,4,3,20],[31,5,45,22,2,40,11,19,33,25,37,36,6,36,39],[37,46,7,41,46,11,45,17,9,30,21,11,15,9,9],[49,48,27,41,25,37,31,39,49,9,33,47,1,48,37],[20,32,35,7,48,20,20,16,30,15,16,30,5,49,42],[9,44,45,38,34,7,30,50,38,8,9,12,49,21,27]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-72356-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,9],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12630.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-5,9,-2,6,10,3,5,1,3,6,4,7,-2,-7,-6,2,7,-10,-4,0,-8,-1,6,-6,-7,1,10],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509720-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"29.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":847833679,\"moneyMax\":21195841975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-628285-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[116,59,146,68,177,16,54,104,171,140,145,180,10,42,158,192,115,140,36,131,60,76],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-774502.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,9],[6,3,5]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-569351.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[132,13,152,192,132,188,149,149,156,143,16,82,151,65,51,149,159,16,18,3,84,129,86,102,105,117,41,162,35,149,191,48,63,115,58,127,81,22,117,20,46,148,162],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"34.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":834378992,\"moneyMax\":20859474800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50909.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[7,6],[6,7,2],[5,3,4,3],[8,4,4,2,3],[6,5,8,6,6,1],[2,3,6,6,1,7,2],[8,4,6,4,5,6,1,6],[1,1,2,6,7,4,1,1,3],[9,5,2,6,9,9,5,2,8,5],[6,5,7,8,4,8,6,1,7,5,7],[7,9,9,6,7,6,1,5,2,1,7,8]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121628-CarmichaelSecurity.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[50,48,47,5],[11,19,24,32],[33,8,15,36]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"41.4.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1047133492,\"moneyMax\":26178337300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":894,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346600-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[127,91,121,165,61,10,28,18,114,77,54,44,183,172,199,158,30,40,122,102,120,108,190,48,6,25,159,186,68,134],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-496154-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,0,8,-10,-2,7,2,-1,4,5,5,-5,-9,-9,-3,1,-3,-4,3,-7,-2,9,9,-1,8,8,-8,-10,-8,9,8,4,10,-9,-6,2,8,1,0,4],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463910-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[174,31,125,136,66,179,127,182,49,198,188,185,101,86,81,107,144,108,184,32,124,112,15,69,26,170,101,147,110,55,140,33,109,197,67,40,98,169,88,165,117,39,190,109]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"54.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":951358234,\"moneyMax\":23783955850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557502.cct\",\"type\":\"Total Ways to Sum\",\"data\":15,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-882226.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12786151118\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43558.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"334316681124\",-13],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-120204-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":763381194,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183429-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,1,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276645.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":77455516,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"1.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"zb-def\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3456}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":20.3,\"minDifficulty\":19,\"moneyAvailable\":24687795550,\"moneyMax\":24687795550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":778,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824675.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,24,29,32,49,8,30,19,27,50,18,36],[29,49,9,11,17,11,5,5,50,29,4,16],[31,25,42,23,24,25,38,7,2,49,5,50],[30,16,28,9,33,24,29,19,20,35,31,43],[15,31,19,15,41,6,20,25,45,49,35,13],[40,46,37,33,33,26,32,12,45,35,2,14]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811871.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,0,0,9,0,0,4,7,3,0,0,1,3,0,3,1,8,10],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-951891.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,7],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934482-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[64,11,152,83,47,49,153,17,189,100,193,75,56,191],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24917.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,0,8,0,9,10,9,0,0,0,3,0,0,7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"66.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":944078705,\"moneyMax\":23601967625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240318.cct\",\"type\":\"Total Ways to Sum\",\"data\":94,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"81.0.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":841094526,\"moneyMax\":21027363150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":750,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124368.cct\",\"type\":\"Total Ways to Sum\",\"data\":61,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"21.2.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1463145712,\"moneyMax\":36578642800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"69.5.6.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"global-pharm\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3463}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":38613351975,\"moneyMax\":38613351975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":837,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-427924-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,0,4],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"54.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"nova-med\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3457}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":31137361100,\"moneyMax\":31137361100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"70.0.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1454599823,\"moneyMax\":36364995575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-854430-CarmichaelSecurity.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,48,36,39,32,16,14,25,1],[34,42,47,42,40,46,17,31,13],[5,13,48,24,21,16,25,8,2],[11,11,10,31,10,12,43,33,8],[11,15,7,13,14,13,41,30,16],[37,34,14,9,46,35,50,1,29],[40,43,37,44,47,31,33,33,24],[29,14,3,35,25,6,33,41,34],[50,31,29,34,9,40,31,47,31],[13,20,27,26,9,17,14,2,35],[12,35,11,8,33,43,4,45,7],[40,16,8,17,34,31,22,6,14],[44,42,38,30,49,31,16,18,20]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"83.6.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[1633777404,36,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1023.644360628314,\"onlineMoneyMade\":1633777404,\"onlineRunningTime\":821.2100000000498,\"pid\":933,\"ramUsage\":2.45,\"server\":\"unitalife\",\"threads\":12,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"unitalife\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":29.012000000000008,\"minDifficulty\":24,\"moneyAvailable\":24037475721,\"moneyMax\":25671253125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-339663-CarmichaelSecurity.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[5,3],[7,6,8],[8,6,3,2],[8,4,3,1,9],[6,2,8,3,1,6],[1,9,9,3,9,1,7],[4,2,7,7,5,3,5,1],[6,5,1,4,1,1,5,2,7],[5,7,6,4,4,8,5,7,8,5],[5,5,2,5,1,7,3,7,2,1,6]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"11.2.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3454}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":31.963999999999988,\"minDifficulty\":27,\"moneyAvailable\":19429501350,\"moneyMax\":19429501350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":665,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159765-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[35,126,97,3,176,171,49,131,20,121,136,188,38,101,42,53,178,59,96,169,9,110,133,29,133,69,145,103,150,144,156,27,170,101,20,24,70,53,184,196]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-764008.cct\",\"type\":\"Total Ways to Sum\",\"data\":35,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131999-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21514241166\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"55.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[7753546,3,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1335.441797762727,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.352,\"onlineExpGained\":496.44853466507624,\"onlineMoneyMade\":7753546,\"onlineRunningTime\":20007.610000038057,\"pid\":32,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[519676,2,14,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2162.8507547567606,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.36000000002,\"onlineExpGained\":608.246506185281,\"onlineMoneyMade\":519676,\"onlineRunningTime\":20007.610000038057,\"pid\":33,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[20184895,5,12,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2053.5688505271664,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.367,\"onlineExpGained\":590.4373920625782,\"onlineMoneyMade\":20184895,\"onlineRunningTime\":20007.610000038057,\"pid\":34,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,3,11,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1981.1411105669192,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.375,\"onlineExpGained\":556.7914304812679,\"onlineMoneyMade\":0,\"onlineRunningTime\":20007.610000038057,\"pid\":35,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7115,4,16,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2084.89655122143,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.385,\"onlineExpGained\":515.793831387961,\"onlineMoneyMade\":7115,\"onlineRunningTime\":20007.610000038057,\"pid\":36,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,2,15,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2333.6934813289095,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.39299999998,\"onlineExpGained\":631.2920460715582,\"onlineMoneyMade\":0,\"onlineRunningTime\":20007.610000038057,\"pid\":37,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":925002175.9057286,\"moneyMax\":15456635625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":512,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561607-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[7,3,145,107,9,65,192,117,163,105,19,120,30,189,175,70,23,167,46,74,31,35,54,150,126,42,153,164,144,124,69,140,118,183,198,190,133,46,63,16,113,123,121,23,160,175,63],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"88.6.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[6884678,4,7,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1761.761923329576,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.4,\"onlineExpGained\":537.2525238156304,\"onlineMoneyMade\":6884678,\"onlineRunningTime\":19968.010000037895,\"pid\":38,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[8260633,4,14,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2048.6813883099417,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.406,\"onlineExpGained\":614.6491009872313,\"onlineMoneyMade\":8260633,\"onlineRunningTime\":19968.010000037895,\"pid\":39,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[20720762,6,11,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2049.565728862316,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.416,\"onlineExpGained\":585.0697794074639,\"onlineMoneyMade\":20720762,\"onlineRunningTime\":19968.010000037895,\"pid\":40,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,1,13,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.963133263483,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.421,\"onlineExpGained\":640.3101450534583,\"onlineMoneyMade\":0,\"onlineRunningTime\":19968.010000037895,\"pid\":41,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[48610,4,16,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1896.8577236833705,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.42899999997,\"onlineExpGained\":605.4971064119542,\"onlineMoneyMade\":48610,\"onlineRunningTime\":19968.010000037895,\"pid\":42,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,3,17,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2391.102999169507,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.44100000002,\"onlineExpGained\":660.5185296859821,\"onlineMoneyMade\":0,\"onlineRunningTime\":19968.010000037895,\"pid\":43,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":703228.3058149155,\"moneyMax\":17619166300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-946072.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[164,10,162,141,2,141,138,138,33,144,181,123,124,44,94,135,45,99,91,192,116,43,21,160,127,111,4,145,163,110,146,154,165,2,11,125,167,180,165,34,9,124,62,79,88,167,199,153,31],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"42.0.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[333686844,120,612,396]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":62902.843506949444,\"offlineMoneyMade\":0,\"offlineRunningTime\":173524.55399999997,\"onlineExpGained\":29656.81912263394,\"onlineMoneyMade\":333686844,\"onlineRunningTime\":79741.60999964387,\"pid\":44,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8837758,3,6,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1562.7143725196643,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.456,\"onlineExpGained\":503.24919952350194,\"onlineMoneyMade\":8837758,\"onlineRunningTime\":19961.81000003787,\"pid\":45,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2428,2,13,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1686.0198232867199,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.461,\"onlineExpGained\":473.7920153443241,\"onlineMoneyMade\":2428,\"onlineRunningTime\":19961.81000003787,\"pid\":46,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[685825,2,13,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1797.5054362606593,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.468,\"onlineExpGained\":509.9232022358628,\"onlineMoneyMade\":685825,\"onlineRunningTime\":19961.81000003787,\"pid\":47,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[10,3,11,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1505.8817236916761,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.479,\"onlineExpGained\":563.7513233622838,\"onlineMoneyMade\":10,\"onlineRunningTime\":19961.81000003787,\"pid\":48,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[16769034,1,15,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1756.556151681718,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.487,\"onlineExpGained\":527.0067407659601,\"onlineMoneyMade\":16769034,\"onlineRunningTime\":19961.81000003787,\"pid\":49,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,4,16,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2493.0100453369987,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.492,\"onlineExpGained\":660.5185296859821,\"onlineMoneyMade\":0,\"onlineRunningTime\":19961.81000003787,\"pid\":50,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[5188634,5,18,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2284.451382782661,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.497,\"onlineExpGained\":651.353868896099,\"onlineMoneyMade\":5188634,\"onlineRunningTime\":19961.81000003787,\"pid\":51,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[171842,1,13,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1313.4415943273098,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.504,\"onlineExpGained\":456.97988472463834,\"onlineMoneyMade\":171842,\"onlineRunningTime\":19961.81000003787,\"pid\":52,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[686561,2,13,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1031.507775886125,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.509,\"onlineExpGained\":438.8613640477057,\"onlineMoneyMade\":686561,\"onlineRunningTime\":19961.81000003787,\"pid\":53,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,177,0,73]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1184.31626218427,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.51499999998,\"onlineExpGained\":404.25,\"onlineMoneyMade\":0,\"onlineRunningTime\":19961.81000003787,\"pid\":54,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[320688,2,9,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1380.3294649592474,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.521,\"onlineExpGained\":387.62432269384016,\"onlineMoneyMade\":320688,\"onlineRunningTime\":19961.81000003787,\"pid\":55,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,11,45,40]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3865.9283662395933,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.53299999997,\"onlineExpGained\":1142.4021943022997,\"onlineMoneyMade\":0,\"onlineRunningTime\":19961.81000003787,\"pid\":56,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[108,13,61,51]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4906.66533858835,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.54499999998,\"onlineExpGained\":1465.642298244003,\"onlineMoneyMade\":108,\"onlineRunningTime\":19961.81000003787,\"pid\":57,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[4155870,40,112,92]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6435.809051430594,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.55800000002,\"onlineExpGained\":2044.8106372120126,\"onlineMoneyMade\":4155870,\"onlineRunningTime\":19961.81000003787,\"pid\":58,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24.08000000000002,\"minDifficulty\":24,\"moneyAvailable\":107832.56064078398,\"moneyMax\":5871712325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":435,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-33606.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[61,58,16,97,160],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828684-CarmichaelSecurity.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37],[42],[27]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"97.7.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[545248020,228,888,564]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":76405.58642541309,\"offlineMoneyMade\":0,\"offlineRunningTime\":328942.188,\"onlineExpGained\":32960.27547508663,\"onlineMoneyMade\":545248020,\"onlineRunningTime\":88548.80999953266,\"pid\":59,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[11544089,6,7,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1737.5341124410165,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.58199999997,\"onlineExpGained\":578.0565129661846,\"onlineMoneyMade\":11544089,\"onlineRunningTime\":19986.61000003797,\"pid\":60,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[9878365,2,16,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2048.622044467022,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.592,\"onlineExpGained\":640.2594801950327,\"onlineMoneyMade\":9878365,\"onlineRunningTime\":19986.61000003797,\"pid\":61,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[21626305,6,10,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2186.5385765713195,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.6,\"onlineExpGained\":568.9669414421209,\"onlineMoneyMade\":21626305,\"onlineRunningTime\":19986.61000003797,\"pid\":62,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[7,2,13,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1988.392238060297,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.606,\"onlineExpGained\":619.4304664104106,\"onlineMoneyMade\":7,\"onlineRunningTime\":19986.61000003797,\"pid\":63,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[143598,2,15,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1731.8559235290138,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.614,\"onlineExpGained\":611.1035611009537,\"onlineMoneyMade\":143598,\"onlineRunningTime\":19986.61000003797,\"pid\":64,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[5,3,14,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2308.3101321893064,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.61899999998,\"onlineExpGained\":648.8279362402126,\"onlineMoneyMade\":5,\"onlineRunningTime\":19986.61000003797,\"pid\":65,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[6566424,4,12,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1692.080908789188,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.624,\"onlineExpGained\":512.8770621229124,\"onlineMoneyMade\":6566424,\"onlineRunningTime\":19986.61000003797,\"pid\":66,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[43825,3,14,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1313.3738491264073,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.63,\"onlineExpGained\":476.22114302883364,\"onlineMoneyMade\":43825,\"onlineRunningTime\":19986.61000003797,\"pid\":67,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[9769409,9,10,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1132.6120231797283,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.636,\"onlineExpGained\":475.43314438501454,\"onlineMoneyMade\":9769409,\"onlineRunningTime\":19986.61000003797,\"pid\":68,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,165,0,76]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1220.6153580192538,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.643,\"onlineExpGained\":399,\"onlineMoneyMade\":0,\"onlineRunningTime\":19986.61000003797,\"pid\":69,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[8804261,7,9,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.2816840018293,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.652,\"onlineExpGained\":477.0760894693418,\"onlineMoneyMade\":8804261,\"onlineRunningTime\":19986.61000003797,\"pid\":70,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[743,10,48,40]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3574.6402939424524,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.65899999999,\"onlineExpGained\":1190.6727095545095,\"onlineMoneyMade\":743,\"onlineRunningTime\":19986.61000003797,\"pid\":71,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[28,12,57,55]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4690.593852179997,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.66700000002,\"onlineExpGained\":1468.7807185828553,\"onlineMoneyMade\":28,\"onlineRunningTime\":19986.61000003797,\"pid\":72,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[2085716,40,114,90]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6151.7933400066395,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.67399999994,\"onlineExpGained\":2026.0723954048005,\"onlineMoneyMade\":2085716,\"onlineRunningTime\":19986.61000003797,\"pid\":73,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":75.11799999999998,\"minDifficulty\":17,\"moneyAvailable\":58251710.03256226,\"moneyMax\":4598908375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":419,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672828.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"46779738\",-92],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690684.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,17],[15,21],[17,26],[20,27],[11,13],[21,28],[9,16],[18,28],[6,12],[13,19],[7,11],[12,15],[12,14],[14,20],[21,29],[17,21],[14,20],[10,14],[3,10]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"82.2.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":882496013,\"moneyMax\":22062400325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":735,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245404-Aevum.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[124,52,159],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"12.8.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[5245280,3,7,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1819.430418442064,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.68,\"onlineExpGained\":516.8505292403534,\"onlineMoneyMade\":5245280,\"onlineRunningTime\":19982.210000037954,\"pid\":74,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2576815,3,14,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2073.600939942459,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.68599999996,\"onlineExpGained\":614.6491009872313,\"onlineMoneyMade\":2576815,\"onlineRunningTime\":19982.210000037954,\"pid\":75,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[30414411,5,10,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1847.642595981726,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.693,\"onlineExpGained\":595.8050047176926,\"onlineMoneyMade\":30414411,\"onlineRunningTime\":19982.210000037954,\"pid\":76,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,3,11,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1981.2283314730646,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.699,\"onlineExpGained\":556.7914304812679,\"onlineMoneyMade\":0,\"onlineRunningTime\":19982.210000037954,\"pid\":77,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[15969439,7,13,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1918.4816760923534,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.70500000002,\"onlineExpGained\":560.6454688999576,\"onlineMoneyMade\":15969439,\"onlineRunningTime\":19982.210000037954,\"pid\":78,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,2,15,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2099.8805982797344,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.71099999998,\"onlineExpGained\":561.1484853969407,\"onlineMoneyMade\":0,\"onlineRunningTime\":19982.210000037954,\"pid\":79,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":25.208000000000013,\"minDifficulty\":18,\"moneyAvailable\":21286884.026650313,\"moneyMax\":5597604975,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":467,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494109.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2717718101\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-443067-CarmichaelSecurity.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[2,5],[4,9,9]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"80.2.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"syscore\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3453}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":28.656000000000024,\"minDifficulty\":25,\"moneyAvailable\":1652119.1637457435,\"moneyMax\":11177810450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":587,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"69.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[1370009328,252,792,516]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":77998.54630490912,\"offlineMoneyMade\":0,\"offlineRunningTime\":328942.338,\"onlineExpGained\":35118.83217189337,\"onlineMoneyMade\":1370009328,\"onlineRunningTime\":88548.80999953266,\"pid\":80,\"ramUsage\":2.45,\"server\":\"catalyst\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[4210345,3,7,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1644.2110140385873,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.72299999997,\"onlineExpGained\":516.8505292403534,\"onlineMoneyMade\":4210345,\"onlineRunningTime\":19973.61000003792,\"pid\":81,\"ramUsage\":2.45,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"catalyst\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":31.41400000000001,\"minDifficulty\":20,\"moneyAvailable\":27751.48211228096,\"moneyMax\":12684213600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":55}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37686-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958893.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":890436275,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489453-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,7,0,4,1,9,0,9,5,0,9,8],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"38.7.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[13824000,7,6,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1661.511537280233,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.72800000003,\"onlineExpGained\":591.657842683036,\"onlineMoneyMade\":13824000,\"onlineRunningTime\":20034.41000003817,\"pid\":82,\"ramUsage\":2.45,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[1224755,3,17,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2302.2428884169117,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.739,\"onlineExpGained\":685.0776438086849,\"onlineMoneyMade\":1224755,\"onlineRunningTime\":20034.41000003817,\"pid\":83,\"ramUsage\":2.45,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[9271214,2,11,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1918.1394657075923,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.74699999997,\"onlineExpGained\":526.0260402012059,\"onlineMoneyMade\":9271214,\"onlineRunningTime\":20034.41000003817,\"pid\":84,\"ramUsage\":2.45,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"the-hub\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14.084000000000003,\"minDifficulty\":14,\"moneyAvailable\":50667.26862542125,\"moneyMax\":4306533600,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":317,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134493-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")((())a\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"25.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"comptek\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3447}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21.71,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":6123988575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":366,\"serverGrowth\":65}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"53.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[7490617,4,7,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1728.437992667729,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.755,\"onlineExpGained\":516.8505292403534,\"onlineMoneyMade\":7490617,\"onlineRunningTime\":19970.410000037904,\"pid\":85,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[1690137,2,14,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2073.6416793750022,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.762,\"onlineExpGained\":614.6491009872313,\"onlineMoneyMade\":1690137,\"onlineRunningTime\":19970.410000037904,\"pid\":86,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[10247817,3,11,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1799.9508456805836,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.766,\"onlineExpGained\":531.3936528563202,\"onlineMoneyMade\":10247817,\"onlineRunningTime\":19970.410000037904,\"pid\":87,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,1,12,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2105.768992438652,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.77499999997,\"onlineExpGained\":612.4705735293948,\"onlineMoneyMade\":0,\"onlineRunningTime\":19970.410000037904,\"pid\":88,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[48673,4,14,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1867.2819540411951,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.78100000005,\"onlineExpGained\":555.039014210958,\"onlineMoneyMade\":48673,\"onlineRunningTime\":19970.410000037904,\"pid\":89,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,3,17,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2592.1815798632474,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.78999999998,\"onlineExpGained\":689.7450133004061,\"onlineMoneyMade\":0,\"onlineRunningTime\":19970.410000037904,\"pid\":90,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"netlink\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":53.82999999999999,\"minDifficulty\":26,\"moneyAvailable\":166999047.61622432,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":381,\"serverGrowth\":62}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35962-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[156,138,165,62,66,139,66,32,189,72,120,84],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59820.cct\",\"type\":\"Total Ways to Sum\",\"data\":21,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-378987.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[138,175,118,101,98,91,58,123,173,181]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"50.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3444}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":44.74800000000001,\"minDifficulty\":19,\"moneyAvailable\":44718.48347870181,\"moneyMax\":1818745600,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":269,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"28.9.0.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[202851719,36950,4974,4119]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":174719.37825926108,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.777,\"onlineExpGained\":143991.12625634938,\"onlineMoneyMade\":202851719,\"onlineRunningTime\":320122.8100088045,\"pid\":91,\"ramUsage\":2.45,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"n00dles\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":9.064,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-629277.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,32,38,20,20],[44,44,43,44,24],[34,11,25,31,35],[19,12,10,35,19],[41,30,4,3,44],[20,24,17,22,34]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"40.8.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[490289160,17592,88884,22218]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":799709.0106324803,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.8,\"onlineExpGained\":729502.9203728777,\"onlineMoneyMade\":490289160,\"onlineRunningTime\":320122.8100088045,\"pid\":92,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.564,\"minDifficulty\":3,\"moneyAvailable\":2134357.7601492605,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226311-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"33768591527\",76],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"56.7.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[970599510,13698,71532,14382]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":676710.4665419138,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.818,\"onlineExpGained\":578568.722546419,\"onlineMoneyMade\":970599510,\"onlineRunningTime\":320122.8100088045,\"pid\":93,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10.223999999999998,\"minDifficulty\":3,\"moneyAvailable\":1495567.4674494204,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"45.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[121376508,13812,26148,19128]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":457378.4311946648,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.83200000005,\"onlineExpGained\":386271.78804129583,\"onlineMoneyMade\":121376508,\"onlineRunningTime\":320122.8100088045,\"pid\":94,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"joesguns\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.224,\"minDifficulty\":5,\"moneyAvailable\":2151330.36636173,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752032.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[193,140,198,97,77,9],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63345-Sector-12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,1,49,28,3,6,12,24,27,1,20,26,38],[34,38,18,3,10,42,30,42,38,8,17,22,27],[48,8,3,5,13,42,11,4,13,6,39,26,50],[28,8,13,38,29,12,16,25,4,29,8,29,26],[2,19,26,13,10,33,37,34,20,7,4,40,39],[39,43,5,33,34,25,42,1,46,38,23,50,25],[5,17,18,34,49,20,25,31,40,44,6,14,43],[22,19,43,30,5,26,44,32,14,48,23,3,3],[34,10,28,2,3,30,12,46,49,14,21,12,10],[27,47,29,20,2,2,21,40,32,26,8,7,26],[44,5,34,15,14,24,34,37,16,35,5,2,8],[7,6,23,45,9,43,43,27,41,46,5,43,37],[5,24,14,45,12,28,47,43,36,14,29,36,42],[11,2,25,14,19,40,27,19,25,5,33,39,44],[45,45,31,25,27,21,10,35,8,3,42,46,25]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-84469.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[51,42,170,99,113,18,29,53,32,188,117,10,148,94],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"78.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[2743281720,8268,26304,4800]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":536083.5880308283,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.851,\"onlineExpGained\":424140.455305136,\"onlineMoneyMade\":2743281720,\"onlineRunningTime\":316020.01000852295,\"pid\":95,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[14178694,7,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1623.4107321618098,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.833,\"onlineExpGained\":571.255848107759,\"onlineMoneyMade\":14178694,\"onlineRunningTime\":20074.610000038334,\"pid\":96,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"zer0\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108856-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":516169086,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"98.6.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[1144554042,8760,36732,6720]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":570801.774672283,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.87299999996,\"onlineExpGained\":470770.218043443,\"onlineMoneyMade\":1144554042,\"onlineRunningTime\":317589.8100086301,\"pid\":97,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":14.224,\"minDifficulty\":7,\"moneyAvailable\":5314521.605581226,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-391061.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[128,75,70,198,180,137,40,113,120,61,71,67,117,192,61,189,137,104,129,132,91,18,155,2,122,1,63,154],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662022-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[147,37,169,151,107,174,101,138,32,18,142,101,189,85,55,165,25,187,122,47,8,19,187,199,90,120,141,169,163,173,66,178,42,102,10,64,122,179,10,169,27,77,87]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"68.7.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[1707172536,7824,38064,6876]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":702058.7730933876,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.891,\"onlineExpGained\":565082.1510283267,\"onlineMoneyMade\":1707172536,\"onlineRunningTime\":316020.01000852295,\"pid\":98,\"ramUsage\":2.45,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[7450808,4,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1363.390929271075,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.85,\"onlineExpGained\":510.04986438192765,\"onlineMoneyMade\":7450808,\"onlineRunningTime\":20055.610000038258,\"pid\":99,\"ramUsage\":2.45,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"neo-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.506,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135253-Sector-12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7977931888\",74],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"75.9.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[231744492,4056,15564,3348]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":313464.4602280825,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.911,\"onlineExpGained\":289274.4794726895,\"onlineMoneyMade\":231744492,\"onlineRunningTime\":311745.010008225,\"pid\":100,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8747493,4,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1646.9938574685332,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.85899999997,\"onlineExpGained\":503.24919952350194,\"onlineMoneyMade\":8747493,\"onlineRunningTime\":20017.6100000381,\"pid\":101,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,1,16,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2048.312155149156,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.864,\"onlineExpGained\":608.246506185281,\"onlineMoneyMade\":0,\"onlineRunningTime\":20017.6100000381,\"pid\":102,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[2698717,3,9,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1749.5171526325087,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.86700000003,\"onlineExpGained\":520.6584275460915,\"onlineMoneyMade\":2698717,\"onlineRunningTime\":20017.6100000381,\"pid\":103,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1528,4,13,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2381.482194365582,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.87199999997,\"onlineExpGained\":668.1497165775218,\"onlineMoneyMade\":1528,\"onlineRunningTime\":20017.6100000381,\"pid\":104,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,4,18,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2116.3595197920376,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.875,\"onlineExpGained\":650.3487439239508,\"onlineMoneyMade\":0,\"onlineRunningTime\":20017.6100000381,\"pid\":105,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,5,17,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2391.592854048809,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.87900000004,\"onlineExpGained\":666.363826408867,\"onlineMoneyMade\":0,\"onlineRunningTime\":20017.6100000381,\"pid\":106,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[3119086,5,17,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1941.9116757510362,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.883,\"onlineExpGained\":589.8086214413494,\"onlineMoneyMade\":3119086,\"onlineRunningTime\":20017.6100000381,\"pid\":107,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5856293,2,14,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1436.8422710159246,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.88899999997,\"onlineExpGained\":485.8417721809313,\"onlineMoneyMade\":5856293,\"onlineRunningTime\":20017.6100000381,\"pid\":108,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[1941643,2,12,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":948.0341444801119,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.89400000003,\"onlineExpGained\":388.575166083906,\"onlineMoneyMade\":1941643,\"onlineRunningTime\":20017.6100000381,\"pid\":109,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,175,0,73]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1192.6927601046043,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.898,\"onlineExpGained\":398.25,\"onlineMoneyMade\":0,\"onlineRunningTime\":20017.6100000381,\"pid\":110,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[17238144,7,10,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1816.0973266090755,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.90099999995,\"onlineExpGained\":511.8628876598147,\"onlineMoneyMade\":17238144,\"onlineRunningTime\":20017.6100000381,\"pid\":111,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,16,51,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3952.3188703789874,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.909,\"onlineExpGained\":1261.4694652577505,\"onlineMoneyMade\":0,\"onlineRunningTime\":20017.6100000381,\"pid\":112,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[3318388,20,61,50]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5015.935495825483,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.915,\"onlineExpGained\":1475.0575592605599,\"onlineMoneyMade\":3318388,\"onlineRunningTime\":20017.6100000381,\"pid\":113,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[99,38,108,88]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5558.99534021001,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.919,\"onlineExpGained\":1955.8039886277554,\"onlineMoneyMade\":99,\"onlineRunningTime\":20017.6100000381,\"pid\":114,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":17.288,\"minDifficulty\":10,\"moneyAvailable\":4240473.044128472,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"4.9.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[929232282,6942,32364,5496]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":417455.63672254916,\"offlineMoneyMade\":0,\"offlineRunningTime\":377773.98799999995,\"onlineExpGained\":336659.4329378519,\"onlineMoneyMade\":929232282,\"onlineRunningTime\":320122.8100088045,\"pid\":115,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.612,\"minDifficulty\":5,\"moneyAvailable\":34919293.59010011,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642063.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,11],[9,10],[15,19],[17,20],[12,18],[14,22],[6,10],[12,15],[24,29],[5,14],[18,19],[15,24]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"32.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[2025916038,9954,25482,4560]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":380821.0180786958,\"offlineMoneyMade\":0,\"offlineRunningTime\":377774.006,\"onlineExpGained\":301686.9804101979,\"onlineMoneyMade\":2025916038,\"onlineRunningTime\":320122.8100088045,\"pid\":116,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.224,\"minDifficulty\":5,\"moneyAvailable\":61777702.90872017,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422383.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,26],[22,27],[5,13],[5,15],[22,29],[23,30],[3,11],[13,23],[17,24],[2,5],[14,24]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-666649-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[62,131,6,93,160,96,97,158,46,56,68,74,24,184,199,40,115,187,95,88,86,55,139,177,121,175,168,54,91,80,113,14,11,176,109,129,52,24,148,83,129,51,26,174,138,67,177],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"51.7.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[7411873344,6852,27132,5928]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":411899.52629384265,\"offlineMoneyMade\":0,\"offlineRunningTime\":377774.02099999995,\"onlineExpGained\":370061.5374506133,\"onlineMoneyMade\":7411873344,\"onlineRunningTime\":311745.010008225,\"pid\":117,\"ramUsage\":2.45,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8180376,3,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1332.2938181834245,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.93899999998,\"onlineExpGained\":489.64786980665053,\"onlineMoneyMade\":8180376,\"onlineRunningTime\":20024.41000003813,\"pid\":118,\"ramUsage\":2.45,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"phantasy\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":10.648,\"minDifficulty\":7,\"moneyAvailable\":4481.467787008729,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978774.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[3,1],[8,1,6],[9,1,4,7],[9,9,5,1,9],[8,5,1,3,8,4],[1,5,3,7,3,2,5]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993635.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[184,156,7,131,101,199,188,163,71,66,76,191,41,4,167,192,44,87,71,25,98,158,69,89,75,137,23,14,93,3,32,193,145,164,86,173,124,84,59,78,188,71,70,80],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"45.1.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[4443534456,9564,31020,5172]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":452291.2231401956,\"offlineMoneyMade\":0,\"offlineRunningTime\":377774.043,\"onlineExpGained\":350914.38190005894,\"onlineMoneyMade\":4443534456,\"onlineRunningTime\":316020.01000852295,\"pid\":119,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[7008536,5,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1446.4035589090242,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.949,\"onlineExpGained\":537.2525238156304,\"onlineMoneyMade\":7008536,\"onlineRunningTime\":20080.41000003836,\"pid\":120,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"98.1.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[205643772,4464,11712,2784]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":270938.88579567824,\"offlineMoneyMade\":0,\"offlineRunningTime\":377774.063,\"onlineExpGained\":248380.7632817651,\"onlineMoneyMade\":205643772,\"onlineRunningTime\":311745.010008225,\"pid\":121,\"ramUsage\":2.45,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[6207014,3,8,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1561.0151838238403,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.96,\"onlineExpGained\":510.04986438192765,\"onlineMoneyMade\":6207014,\"onlineRunningTime\":20014.210000038085,\"pid\":122,\"ramUsage\":2.45,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"omega-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":17.304000000000006,\"minDifficulty\":10,\"moneyAvailable\":127287113.36007583,\"moneyMax\":1526324475,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":183,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-522757.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[5,1],[8,7,4],[4,3,2,3],[4,7,9,1,1],[7,1,4,6,9,5],[7,5,7,5,4,7,8],[2,6,9,9,5,7,9,9],[1,9,4,1,9,4,5,6,5],[6,7,2,2,8,4,8,1,2,3],[7,1,9,5,1,8,4,4,8,4,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"85.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3441}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":38300.11460219761,\"moneyMax\":1464360325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":249,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826556-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,1,0],[0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46818.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[149,178,17,32,36,164,10,108,171,25,127]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-613344-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":914201880,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"2.2.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[1807356,55,1504,396]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":27893.47036444136,\"offlineMoneyMade\":0,\"offlineRunningTime\":377774.08400000003,\"onlineExpGained\":24071.683998996716,\"onlineMoneyMade\":1807356,\"onlineRunningTime\":317575.21000862913,\"pid\":123,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[5013345,4,8,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1554.7777314698847,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.97,\"onlineExpGained\":530.4518589572048,\"onlineMoneyMade\":5013345,\"onlineRunningTime\":20165.610000038716,\"pid\":124,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[15035973,8,17,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2891.289903230925,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.97600000002,\"onlineExpGained\":755.5061866301386,\"onlineMoneyMade\":15035973,\"onlineRunningTime\":20165.610000038716,\"pid\":125,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[16874389,4,10,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2277.5027108949685,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.98,\"onlineExpGained\":547.4964908216633,\"onlineMoneyMade\":16874389,\"onlineRunningTime\":20165.610000038716,\"pid\":126,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,3,14,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2206.5371997045527,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.985,\"onlineExpGained\":619.4304664104106,\"onlineMoneyMade\":0,\"onlineRunningTime\":20165.610000038716,\"pid\":127,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,5,12,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1408.5432439564277,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.99199999997,\"onlineExpGained\":504.58092200996185,\"onlineMoneyMade\":0,\"onlineRunningTime\":20165.610000038716,\"pid\":128,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,4,15,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2371.227997174545,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.995,\"onlineExpGained\":625.4467493486734,\"onlineMoneyMade\":0,\"onlineRunningTime\":20165.610000038716,\"pid\":129,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[46340,2,12,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1666.8821517019683,\"offlineMoneyMade\":0,\"offlineRunningTime\":141247.99899999998,\"onlineExpGained\":487.23320901676675,\"onlineMoneyMade\":46340,\"onlineRunningTime\":20165.610000038716,\"pid\":130,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5856293,3,16,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2004.3691345423365,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.004,\"onlineExpGained\":543.5655470935171,\"onlineMoneyMade\":5856293,\"onlineRunningTime\":20165.610000038716,\"pid\":131,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,9,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":650.2923324682357,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.00799999997,\"onlineExpGained\":297.145715240634,\"onlineMoneyMade\":0,\"onlineRunningTime\":20165.610000038716,\"pid\":132,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,175,0,76]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1217.0583958215718,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.01200000002,\"onlineExpGained\":404.25,\"onlineMoneyMade\":0,\"onlineRunningTime\":20165.610000038716,\"pid\":133,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[7094003,4,10,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1397.2579237474504,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.017,\"onlineExpGained\":407.5024930883961,\"onlineMoneyMade\":7094003,\"onlineRunningTime\":20165.610000038716,\"pid\":134,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[4345319,14,48,39]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4071.3637733836445,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.02,\"onlineExpGained\":1184.2366408542148,\"onlineMoneyMade\":4345319,\"onlineRunningTime\":20165.610000038716,\"pid\":135,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n\\tvar scriptName = \\\"autoHack.js\\\";\\n\\tvar vers = \\\"v1\\\";\\n\\tvar host = ns.getHostname();\\n\\tvar scriptRam = 2.6;\\n\\tns.tprint(\\\"script to copy/run = \\\" + scriptName + \\\"(ram: \\\" + scriptRam + \\\")\\\");\\n\\n\\tif (ns.args.length > 0) {\\n\\t\\tvar targets = ns.args;\\n\\t}\\n\\telse {\\n\\t\\tvar allServers = ns.scan();\\n\\t\\tvar targets = [];\\n\\n\\t\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\t\\tvar server = allServers[i];\\n\\t\\t\\tif (!server.startsWith(\\\"pserv\\\") && !server.startsWith(\\\"undefined\\\")) {\\n\\t\\t\\t\\ttargets.push(server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tif (ns.getServerNumPortsRequired(target) == 0) {\\n\\t\\t\\tns.kill(scriptName, target);\\n\\t\\t\\tvar targetRam = ns.getServerMaxRam(target) - ns.getServerUsedRam(target);\\n\\t\\t\\tawait ns.scp(scriptName, target);\\n\\t\\t\\tvar threads = Math.floor(targetRam / scriptRam);\\n\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": nuking \\\" + target);\\n\\t\\t\\tns.nuke(target);\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running \\\" + scriptName + \\\" on \\\" + target);\\n\\t\\t\\t\\tns.exec(scriptName, target, threads);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\"not enough ram (\\\" + targetRam + \\\")\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\t\\tawait ns.sleep(100000)\\n}\",\"filename\":\"copyRun_autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"copyRun_autoHack.js\",\"url\":\"blob:file:///1308c6ed-3147-4a92-9102-c4da6126131e\"}],\"ramUsage\":4.5,\"server\":\"iron-gym\",\"_hash\":\"4a0216f1dd08791fd89bc8aa70b1057f7bda35127a6fb1b9075ce8ec33f007c1\",\"moduleSequenceNumber\":116}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538904-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,12],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313720.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,1,3,6,-5,-8,-6,4,-2,8,8,-1,10,6,2,-7,7,-7,3,9,-3,-10,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"33.5.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":249.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[367086420,240,612,540]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":58490.0320748075,\"offlineMoneyMade\":0,\"offlineRunningTime\":328942.711,\"onlineExpGained\":26715.685536404068,\"onlineMoneyMade\":367086420,\"onlineRunningTime\":88548.80999953266,\"pid\":136,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[25188741,12,21,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3995.438455380032,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.032,\"onlineExpGained\":1509.747598570506,\"onlineMoneyMade\":25188741,\"onlineRunningTime\":19992.010000037993,\"pid\":137,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2050389,9,39,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5978.456649745521,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.03699999998,\"onlineExpGained\":1863.1550873675453,\"onlineMoneyMade\":2050389,\"onlineRunningTime\":19992.010000037993,\"pid\":138,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[106948041,24,33,27]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6438.38253394258,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.041,\"onlineExpGained\":1900.1348799104792,\"onlineMoneyMade\":106948041,\"onlineRunningTime\":19992.010000037993,\"pid\":139,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,9,36,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5953.187009755208,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.04599999997,\"onlineExpGained\":1753.8930060159944,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":140,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,9,51,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5609.370451400759,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.051,\"onlineExpGained\":1732.3944989008692,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":141,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,15,42,33]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6479.972865912148,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.057,\"onlineExpGained\":1858.8043578773666,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":142,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[3906723,9,42,21]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5344.380926206974,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.062,\"onlineExpGained\":1554.0174982324243,\"onlineMoneyMade\":3906723,\"onlineRunningTime\":19992.010000037993,\"pid\":143,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,3,27,33]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3490.0244189364807,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.067,\"onlineExpGained\":1241.0611606205969,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":144,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[4464111,9,27,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2251.0056915041487,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.072,\"onlineExpGained\":1028.5813219868094,\"onlineMoneyMade\":4464111,\"onlineRunningTime\":19992.010000037993,\"pid\":145,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,546,0,222]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3738.793888684548,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.074,\"onlineExpGained\":1210.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":146,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[2480271,12,27,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4663.902421563805,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.077,\"onlineExpGained\":1311.959246040689,\"onlineMoneyMade\":2480271,\"onlineRunningTime\":19992.010000037993,\"pid\":147,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[162,42,147,114]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12518.756646781883,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.08200000002,\"onlineExpGained\":3620.288643915744,\"onlineMoneyMade\":162,\"onlineRunningTime\":19992.010000037993,\"pid\":148,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[10045608,45,150,138]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12122.8263285742,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.08699999997,\"onlineExpGained\":3832.0112337386017,\"onlineMoneyMade\":10045608,\"onlineRunningTime\":19992.010000037993,\"pid\":149,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[6214638,123,342,282]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19352.64088732647,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.09300000002,\"onlineExpGained\":6246.861362479304,\"onlineMoneyMade\":6214638,\"onlineRunningTime\":19992.010000037993,\"pid\":150,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[39,21,75,69]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8458.192514068707,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.096,\"onlineExpGained\":2480.7598181946114,\"onlineMoneyMade\":39,\"onlineRunningTime\":19992.010000037993,\"pid\":151,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,15,63,36]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6422.512317706788,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.09999999998,\"onlineExpGained\":1743.9538900914822,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":152,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,594,0,366]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4805.58577316756,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.109,\"onlineExpGained\":1613.25,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":153,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,9,54,45]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8533.300098031565,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.117,\"onlineExpGained\":2206.088801251997,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":154,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,171,186,165]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12767.06696600208,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.12399999998,\"onlineExpGained\":4340.714847284975,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":155,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,105,138,117]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8193.269204241857,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.12799999997,\"onlineExpGained\":3099.336169368249,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":156,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[2776446,117,147,123]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6019.562032402673,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.132,\"onlineExpGained\":2344.7174643279077,\"onlineMoneyMade\":2776446,\"onlineRunningTime\":19992.010000037993,\"pid\":157,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,66,87,78]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6350.917197842159,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.136,\"onlineExpGained\":2316.1542100729625,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":158,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,45,0,186]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2435.1885723733017,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.141,\"onlineExpGained\":706.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":159,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,660,789,711]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":35898.20275705904,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.144,\"onlineExpGained\":12948.43972837789,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":160,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,2616,2610,1746]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":44425.51172203186,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.149,\"onlineExpGained\":16625.464786353125,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":161,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,1839,2049,1944]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":80849.07144322638,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.153,\"onlineExpGained\":27538.301551765715,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":162,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,1017,1206,1104]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45034.82106065499,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.15899999996,\"onlineExpGained\":15858.759138535434,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":163,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,360,459,411]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":24376.33785657446,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.165,\"onlineExpGained\":9029.49027085027,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":164,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,258,339,294]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14448.95449958181,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.17,\"onlineExpGained\":5447.676894731978,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":165,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,201,270,243]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11248.370081239553,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.177,\"onlineExpGained\":4391.970772733611,\"onlineMoneyMade\":0,\"onlineRunningTime\":19992.010000037993,\"pid\":166,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":19.652000000000005,\"minDifficulty\":16,\"moneyAvailable\":11440388.401875723,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423081-CarmichaelSecurity.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a(a())a))()((\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"84.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1074,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-469719.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-1,7,0,-9,8],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-140955-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,8,0,4,10,5,3,6,0,3,0,0,7,8,2,5,0,0,8,9,6,0,0],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955626.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,14],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397784.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a)(a(a)()aa\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581663-TheBlackHand.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a)(a())((())((((\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"24.9.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"snap-fitness\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3464}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":791,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810052.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,20,47,9,39,39,21,33],[16,31,10,3,29,14,7,20],[44,41,9,35,6,39,1,18],[23,8,30,41,29,17,23,16],[30,19,2,22,15,40,8,11],[18,12,32,19,34,14,25,26],[12,40,31,38,18,36,32,21],[15,1,10,50,35,21,32,2],[12,28,37,47,9,47,25,32],[29,49,29,22,40,29,46,39],[17,16,9,27,23,20,19,46],[30,40,13,32,21,10,17,42],[11,30,2,23,8,16,17,41]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291999.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,16],[12,20],[25,26],[3,10],[2,7],[10,20],[1,7],[10,18],[5,7],[20,28],[10,13],[10,14],[9,16],[9,14],[16,23],[12,13]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"20.4.4.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":518,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-584453-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,12],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"94.6.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":249.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,9804,0,3372]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47724.48034897324,\"offlineMoneyMade\":0,\"offlineRunningTime\":328942.87200000003,\"onlineExpGained\":20466,\"onlineMoneyMade\":0,\"onlineRunningTime\":88548.80999953266,\"pid\":167,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[40571010,18,21,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5132.324621101397,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.186,\"onlineExpGained\":1672.9635551727226,\"onlineMoneyMade\":40571010,\"onlineRunningTime\":20000.410000038028,\"pid\":168,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,3,45,27]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6237.616496330409,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.19100000002,\"onlineExpGained\":1920.7784405850982,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":169,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[81881655,18,39,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6429.079240944008,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.196,\"onlineExpGained\":1819.620690083764,\"onlineMoneyMade\":81881655,\"onlineRunningTime\":20000.410000038028,\"pid\":170,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,3,33,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5943.547249128892,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.20099999997,\"onlineExpGained\":1670.3742914438042,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":171,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[53492085,9,54,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5601.591924629985,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.205,\"onlineExpGained\":1866.949411436859,\"onlineMoneyMade\":53492085,\"onlineRunningTime\":20000.410000038028,\"pid\":172,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[15,12,48,36]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7230.449522994289,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.21,\"onlineExpGained\":2086.770930069874,\"onlineMoneyMade\":15,\"onlineRunningTime\":20000.410000038028,\"pid\":173,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[10350627,12,54,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5779.056477920421,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.214,\"onlineExpGained\":1815.5847999151092,\"onlineMoneyMade\":10350627,\"onlineRunningTime\":20000.410000038028,\"pid\":174,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[70308,15,36,33]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3696.789708435501,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.21899999998,\"onlineExpGained\":1443.0943728146476,\"onlineMoneyMade\":70308,\"onlineRunningTime\":20000.410000038028,\"pid\":175,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[243165,12,21,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2238.8174999345506,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.222,\"onlineExpGained\":960.0092338543554,\"onlineMoneyMade\":243165,\"onlineRunningTime\":20000.410000038028,\"pid\":176,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\"],\"dataMap\":{\"I.I.I.I\":[0,459,0,219]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3537.7524212980434,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.22900000002,\"onlineExpGained\":1149.75,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":177,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[3015918,3,39,21]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4608.668676690533,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.23399999997,\"onlineExpGained\":1341.7765016325231,\"onlineMoneyMade\":3015918,\"onlineRunningTime\":20000.410000038028,\"pid\":178,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[42,48,162,129]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10614.753516651996,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.24000000002,\"onlineExpGained\":3958.1822506812146,\"onlineMoneyMade\":42,\"onlineRunningTime\":20000.410000038028,\"pid\":179,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,36,174,165]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12994.327656267253,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.247,\"onlineExpGained\":4406.342155748564,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":180,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[6257118,114,312,282]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":15802.144716237584,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.25000000003,\"onlineExpGained\":5930.653531982602,\"onlineMoneyMade\":6257118,\"onlineRunningTime\":20000.410000038028,\"pid\":181,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12,21,90,66]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8867.20838804907,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.25699999998,\"onlineExpGained\":2661.3976690340255,\"onlineMoneyMade\":12,\"onlineRunningTime\":20000.410000038028,\"pid\":182,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,21,72,57]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6447.766190040007,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.26099999997,\"onlineExpGained\":2259.771237865019,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":183,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,615,0,378]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4851.480106123311,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.26700000002,\"onlineExpGained\":1674,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":184,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,9,60,63]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8344.85218289788,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.269,\"onlineExpGained\":2753.5852920736606,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":185,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[2899548,168,186,165]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12851.986287166113,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.27599999998,\"onlineExpGained\":4381.820101520628,\"onlineMoneyMade\":2899548,\"onlineRunningTime\":20000.410000038028,\"pid\":186,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[2199708,114,138,117]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8273.531366935058,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.28000000003,\"onlineExpGained\":3148.6624744510327,\"onlineMoneyMade\":2199708,\"onlineRunningTime\":20000.410000038028,\"pid\":187,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,108,150,123]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6133.634131050055,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.285,\"onlineExpGained\":2333.0522033113507,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":188,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,72,84,78]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6350.651827605046,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.28899999996,\"onlineExpGained\":2278.4931660067355,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":189,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,60,0,201]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2391.286819670751,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.29499999998,\"onlineExpGained\":762.75,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":190,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,666,789,711]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":36069.13179011275,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.3,\"onlineExpGained\":12960.104989394451,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":191,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,2613,2613,1746]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":44498.06740759782,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.306,\"onlineExpGained\":16632.931312454777,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":192,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,1851,2052,1941]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":81075.2358531874,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.314,\"onlineExpGained\":27556.85523312112,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":193,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,1029,1200,1101]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":44852.511966396036,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.31899999996,\"onlineExpGained\":15821.651775824617,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":194,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,348,465,414]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":24927.515674227703,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.32499999998,\"onlineExpGained\":9099.758677627317,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":195,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[882096,261,345,294]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14908.422804786009,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.329,\"onlineExpGained\":5500.170569306482,\"onlineMoneyMade\":882096,\"onlineRunningTime\":20000.410000038028,\"pid\":196,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,210,270,243]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11305.386256196749,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.33299999998,\"onlineExpGained\":4403.636033750168,\"onlineMoneyMade\":0,\"onlineRunningTime\":20000.410000038028,\"pid\":197,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":4.622,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":349,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498091.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[193,25,182,6,99,9,153,64,81,67,105,59,84,140,24,103,115,159,49,179,188,70,22,1,197,39,76,171,5,188,195],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"23.4.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[6883093,4,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1728.0466126962972,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.338,\"onlineExpGained\":496.44853466507624,\"onlineMoneyMade\":6883093,\"onlineRunningTime\":20041.210000038198,\"pid\":198,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2559203,4,17,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2410.8888294131225,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.342,\"onlineExpGained\":710.6880230164862,\"onlineMoneyMade\":2559203,\"onlineRunningTime\":20041.210000038198,\"pid\":199,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[24079271,5,9,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1888.1082977359163,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.347,\"onlineExpGained\":563.5993287870065,\"onlineMoneyMade\":24079271,\"onlineRunningTime\":20041.210000038198,\"pid\":200,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,1,14,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2381.4030838940603,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.34900000002,\"onlineExpGained\":668.1497165775218,\"onlineMoneyMade\":0,\"onlineRunningTime\":20041.210000038198,\"pid\":201,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,1,16,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2018.5790014022132,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.353,\"onlineExpGained\":627.9229251679525,\"onlineMoneyMade\":0,\"onlineRunningTime\":20041.210000038198,\"pid\":202,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,3,18,11]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2595.253790388817,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.35899999997,\"onlineExpGained\":713.1262001919453,\"onlineMoneyMade\":0,\"onlineRunningTime\":20041.210000038198,\"pid\":203,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":6.382000000000001,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-975447-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,3,0,1,9,0,1,10,10,3],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380628-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,7],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"87.4.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185416-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,22],[13,20],[21,25],[18,27],[2,4],[1,3],[8,15],[3,5],[1,6],[4,9],[11,15],[3,4],[24,27],[5,6]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795773-CarmichaelSecurity.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a)a(a)(aa)((((a((((\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593808.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[175,185,31,95,24,145],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392688-TheBlackHand.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,0,3,3,5,4,0,7,0,6],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"32.6.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[17683261,7,7,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1655.9007725748108,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.36400000003,\"onlineExpGained\":584.8571778246104,\"onlineMoneyMade\":17683261,\"onlineRunningTime\":20087.210000038387,\"pid\":204,\"ramUsage\":2.45,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[445280,3,17,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2333.9607871773133,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.368,\"onlineExpGained\":633.8568853930823,\"onlineMoneyMade\":445280,\"onlineRunningTime\":20087.210000038387,\"pid\":205,\"ramUsage\":2.45,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[10093313,4,10,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1677.0575244848849,\"offlineMoneyMade\":0,\"offlineRunningTime\":141248.372,\"onlineExpGained\":526.0260402012059,\"onlineMoneyMade\":10093313,\"onlineRunningTime\":20087.210000038387,\"pid\":206,\"ramUsage\":2.45,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}],\"ramUsage\":2.45,\"server\":\"CSEC\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":100,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264776-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(a(()\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330315-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[3,1],[5,9,7],[9,2,7,9],[3,1,9,3,8],[9,1,5,5,6,6]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"88.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"29.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"3.6.7.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[498513440,342392,342392,427990]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12197562.18048658,\"onlineMoneyMade\":498513440,\"onlineRunningTime\":693.0100000000207,\"pid\":942,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[562500000,256794,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8444466.124952247,\"onlineMoneyMade\":562500000,\"onlineRunningTime\":693.0100000000207,\"pid\":943,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[250000000,256794,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4992615.062476124,\"onlineMoneyMade\":250000000,\"onlineRunningTime\":693.0100000000207,\"pid\":944,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":693.0100000000207,\"pid\":945,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,427990,0,427990]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1604962.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":693.0100000000207,\"pid\":946,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///81d41352-918e-4e14-aadc-cd151f0bb36f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-0\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"5.1.0.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,427990,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9382740.13883583,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":947,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,342392,513588,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9382740.13883583,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":948,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5159035.564558661,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":949,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5910135.091631647,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":950,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,427990,0,427990]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1604962.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":951,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-1\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343865-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,14],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219161.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[37,75,187,187,181,134,102,68,166,81,74,31,54,78],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"27.7.8.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"42.7.4.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,342392,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11259288.166602997,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":671.0100000000157,\"pid\":952,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,171196,513588,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8913603.131894039,\"onlineMoneyMade\":0,\"onlineRunningTime\":671.0100000000157,\"pid\":953,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[750000000,256794,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5991138.074971347,\"onlineMoneyMade\":750000000,\"onlineRunningTime\":671.0100000000157,\"pid\":954,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4566922.570806273,\"onlineMoneyMade\":0,\"onlineRunningTime\":671.0100000000157,\"pid\":955,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":671.0100000000157,\"pid\":956,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-2\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"5.7.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,427990,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9382740.13883583,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.0100000000132,\"pid\":957,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,256794,427990,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8209897.621481352,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.0100000000132,\"pid\":958,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,342392,427990,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5991138.074971348,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.0100000000132,\"pid\":959,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":660.0100000000132,\"pid\":960,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.0100000000132,\"pid\":961,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-3\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"34.3.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,342392,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11259288.166602997,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":649.0100000000107,\"pid\":962,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,85598,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6098781.090243289,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.0100000000107,\"pid\":963,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,427990,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5824717.572888811,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.0100000000107,\"pid\":964,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,85598,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3492352.5541459736,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.0100000000107,\"pid\":965,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,427990,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1348168.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.0100000000107,\"pid\":966,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-7\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"66.7.1.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,427990,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9382740.13883583,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.0100000000082,\"pid\":967,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,342392,599186,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10555582.65619031,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":638.0100000000082,\"pid\":968,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5159035.564558661,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.0100000000082,\"pid\":969,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":638.0100000000082,\"pid\":970,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.0100000000082,\"pid\":971,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-20\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"32.1.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,342392,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11259288.166602997,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":627.0100000000057,\"pid\":972,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7506192.111068664,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":627.0100000000057,\"pid\":973,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[750000000,256794,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5991138.074971347,\"onlineMoneyMade\":750000000,\"onlineRunningTime\":627.0100000000057,\"pid\":974,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5104207.579136423,\"onlineMoneyMade\":0,\"onlineRunningTime\":627.0100000000057,\"pid\":975,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":627.0100000000057,\"pid\":976,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-4\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"32.3.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,427990,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9382740.13883583,\"onlineMoneyMade\":0,\"onlineRunningTime\":616.0100000000032,\"pid\":977,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,342392,427990,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8444466.124952247,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":616.0100000000032,\"pid\":978,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3661251.0458158236,\"onlineMoneyMade\":0,\"onlineRunningTime\":616.0100000000032,\"pid\":979,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4566922.570806273,\"onlineMoneyMade\":0,\"onlineRunningTime\":616.0100000000032,\"pid\":980,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":616.0100000000032,\"pid\":981,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-5\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"7.6.0.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,342392,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11259288.166602997,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":605.0100000000007,\"pid\":982,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,171196,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6567918.097185081,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":605.0100000000007,\"pid\":983,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994092.0499808984,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":605.0100000000007,\"pid\":984,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":605.0100000000007,\"pid\":985,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,342392,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":605.0100000000007,\"pid\":986,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-6\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"10.7.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,427990,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9617308.642306726,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":987,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,342392,427990,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8913603.131894039,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":594.0099999999982,\"pid\":988,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3661251.0458158236,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":989,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5910135.091631647,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":990,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":991,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-8\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"93.4.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[500000000,342392,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11493856.670073893,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":583.0099999999957,\"pid\":992,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5629644.083301498,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":583.0099999999957,\"pid\":993,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994092.0499808984,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":583.0099999999957,\"pid\":994,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":583.0099999999957,\"pid\":995,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1283970,\"onlineMoneyMade\":0,\"onlineRunningTime\":583.0099999999957,\"pid\":996,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-9\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"91.7.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8679034.628423143,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.8099999999931,\"pid\":997,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,256794,342392,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7037055.1041268725,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":571.8099999999931,\"pid\":998,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3661251.0458158236,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.8099999999931,\"pid\":999,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6447420.099961797,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":571.8099999999931,\"pid\":1000,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1348168.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.8099999999931,\"pid\":1001,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-10\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"84.1.6.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,171196,342392,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7975329.118010456,\"onlineMoneyMade\":0,\"onlineRunningTime\":560.8099999999906,\"pid\":1002,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5629644.083301498,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":560.8099999999906,\"pid\":1003,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994092.0499808984,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":560.8099999999906,\"pid\":1004,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4566922.570806273,\"onlineMoneyMade\":0,\"onlineRunningTime\":560.8099999999906,\"pid\":1005,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":560.8099999999906,\"pid\":1006,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-11\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"48.9.7.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,256794,342392]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7271623.607597768,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.8099999999881,\"pid\":1007,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,85598,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5864212.586772393,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":549.8099999999881,\"pid\":1008,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3661251.0458158236,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.8099999999881,\"pid\":1009,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[500000000,171196,171196,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4566922.570806273,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":549.8099999999881,\"pid\":1010,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.8099999999881,\"pid\":1011,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-12\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":3995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"24.4.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7271623.607597768,\"onlineMoneyMade\":0,\"onlineRunningTime\":538.8099999999856,\"pid\":1012,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5629644.083301498,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":538.8099999999856,\"pid\":1013,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994092.0499808984,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":538.8099999999856,\"pid\":1014,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,256794,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4835565.074971348,\"onlineMoneyMade\":0,\"onlineRunningTime\":538.8099999999856,\"pid\":1015,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":538.8099999999856,\"pid\":1016,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-13\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"54.8.9.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,171196,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6333349.593714185,\"onlineMoneyMade\":0,\"onlineRunningTime\":527.8099999999831,\"pid\":1017,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,85598,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4691370.069417914,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":527.8099999999831,\"pid\":1018,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3661251.0458158236,\"onlineMoneyMade\":0,\"onlineRunningTime\":527.8099999999831,\"pid\":1019,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,171196,342392,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5910135.091631647,\"onlineMoneyMade\":0,\"onlineRunningTime\":527.8099999999831,\"pid\":1020,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":527.8099999999831,\"pid\":1021,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-15\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"98.9.7.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7271623.607597768,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.8099999999806,\"pid\":1022,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[375000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5864212.586772393,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":516.8099999999806,\"pid\":1023,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994092.0499808984,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":516.8099999999806,\"pid\":1024,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,85598,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2417782.537485674,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.8099999999806,\"pid\":1025,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.8099999999806,\"pid\":1026,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-16\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"91.7.3.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,171196,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6333349.593714185,\"onlineMoneyMade\":0,\"onlineRunningTime\":505.8099999999798,\"pid\":1027,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,256794,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5395075.579830602,\"onlineMoneyMade\":0,\"onlineRunningTime\":505.8099999999798,\"pid\":1028,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2662728.0333205992,\"onlineMoneyMade\":0,\"onlineRunningTime\":505.8099999999798,\"pid\":1029,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,171196,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3492352.5541459736,\"onlineMoneyMade\":0,\"onlineRunningTime\":505.8099999999798,\"pid\":1030,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":505.8099999999798,\"pid\":1031,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-17\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"92.3.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7271623.607597768,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.80999999998045,\"pid\":1032,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,85598,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4925938.57288881,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.80999999998045,\"pid\":1033,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827671.5478983615,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.80999999998045,\"pid\":1034,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,85598,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2149140.0333205992,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.80999999998045,\"pid\":1035,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1027176,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.80999999998045,\"pid\":1036,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-18\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"83.4.1.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,171196,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6333349.593714185,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.8099999999811,\"pid\":1037,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,85598,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4222233.062476123,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.8099999999811,\"pid\":1038,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,342392,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4493353.556228511,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.8099999999811,\"pid\":1039,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[500000000,85598,85598,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3223710.049980899,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":483.8099999999811,\"pid\":1040,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.8099999999811,\"pid\":1041,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-19\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"20.5.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7271623.607597768,\"onlineMoneyMade\":0,\"onlineRunningTime\":472.8099999999817,\"pid\":1042,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4691370.069417914,\"onlineMoneyMade\":0,\"onlineRunningTime\":472.8099999999817,\"pid\":1043,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827671.5478983615,\"onlineMoneyMade\":0,\"onlineRunningTime\":472.8099999999817,\"pid\":1044,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,85598,171196,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3492352.5541459736,\"onlineMoneyMade\":0,\"onlineRunningTime\":472.8099999999817,\"pid\":1045,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":472.8099999999817,\"pid\":1046,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-14\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"6.2.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,256794,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6333349.593714185,\"onlineMoneyMade\":0,\"onlineRunningTime\":461.60999999998234,\"pid\":1047,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,171196,342392,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7037055.1041268725,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":461.60999999998234,\"pid\":1048,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,85598,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3494830.5437332867,\"onlineMoneyMade\":0,\"onlineRunningTime\":461.60999999998234,\"pid\":1049,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[500000000,85598,85598,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3223710.049980899,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":461.60999999998234,\"pid\":1050,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,256794,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":962977.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":461.60999999998234,\"pid\":1051,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-21\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"14.8.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7506192.111068664,\"onlineMoneyMade\":0,\"onlineRunningTime\":450.60999999998296,\"pid\":1052,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,171196,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4456801.565947019,\"onlineMoneyMade\":0,\"onlineRunningTime\":450.60999999998296,\"pid\":1053,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,85598,171196,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2829148.535403137,\"onlineMoneyMade\":0,\"onlineRunningTime\":450.60999999998296,\"pid\":1054,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[500000000,85598,85598,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3223710.049980899,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":450.60999999998296,\"pid\":1055,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1027176,\"onlineMoneyMade\":0,\"onlineRunningTime\":450.60999999998296,\"pid\":1056,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-22\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"13.8.9.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,342392,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7506192.111068664,\"onlineMoneyMade\":0,\"onlineRunningTime\":439.6099999999836,\"pid\":1057,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,171196,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5395075.579830602,\"onlineMoneyMade\":0,\"onlineRunningTime\":439.6099999999836,\"pid\":1058,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,342392,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4493353.556228511,\"onlineMoneyMade\":0,\"onlineRunningTime\":439.6099999999836,\"pid\":1059,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1500000000,256794,342392,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8865202.63744747,\"onlineMoneyMade\":1500000000,\"onlineRunningTime\":439.6099999999836,\"pid\":1060,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1027176,\"onlineMoneyMade\":0,\"onlineRunningTime\":439.6099999999836,\"pid\":1061,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-23\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"6.6.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,342392,256794,256794]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6567918.097185081,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.6099999999842,\"pid\":1062,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,427990,513588,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7740760.61453956,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.6099999999842,\"pid\":1063,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,256794,256794,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827671.5478983615,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.6099999999842,\"pid\":1064,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,171196,85598]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3223710.049980899,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.6099999999842,\"pid\":1065,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,0,171196]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":706183.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.6099999999842,\"pid\":1066,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":85598,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///df36851f-372f-4bd1-8017-eff05dba7bbf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"pserv-24\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":4209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":10333.287058044763,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":9190.125637625206,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":294022.2114232783}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":303579.94822562876}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":69.3685,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":411357.60561720724}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":63.3701,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":107465.17318376839}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":228783.5401215293}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15715.388612483914,\"lastPrice\":15664.869636364412,\"playerShares\":10440000,\"playerAvgPx\":15398.2165063345,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":14.009767064074452,\"otlkMagForecast\":68.75385519675334,\"cap\":100875914,\"spreadPerc\":0.1,\"shareTxForMovement\":74995,\"shareTxUntilMovement\":28345,\"totalShares\":116100000,\"maxShares\":23200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":62141.390926951244,\"lastPrice\":61941.6300733267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":13.413939504291374,\"otlkMagForecast\":31.328056376293596,\"cap\":635732958,\"spreadPerc\":0.3,\"shareTxForMovement\":58078,\"shareTxUntilMovement\":58078,\"totalShares\":76000000,\"maxShares\":15200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":5307.8586110405495,\"lastPrice\":5281.363888680553,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":9.505473673891277,\"otlkMagForecast\":37.684345001739736,\"cap\":56841880,\"spreadPerc\":0.2,\"shareTxForMovement\":53620,\"shareTxUntilMovement\":53620,\"totalShares\":71500000,\"maxShares\":14300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":27569.251218298596,\"lastPrice\":27429.6804918981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":9.79301045953046,\"otlkMagForecast\":36.50313488555576,\"cap\":259108974,\"spreadPerc\":0.3,\"shareTxForMovement\":63264,\"shareTxUntilMovement\":63264,\"totalShares\":76200000,\"maxShares\":15200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":63461.371735429144,\"lastPrice\":63171.62585513401,\"playerShares\":4455000,\"playerAvgPx\":57957.2368929636,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.507216513789944,\"otlkMagForecast\":63.45976779560244,\"cap\":788834157,\"spreadPerc\":0.4,\"shareTxForMovement\":36159,\"shareTxUntilMovement\":5871,\"totalShares\":49400000,\"maxShares\":9900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":24881.850189413926,\"lastPrice\":24694.256998750538,\"playerShares\":3150000,\"playerAvgPx\":19043.748920394595,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":20.87271285456419,\"otlkMagForecast\":70.1941636564292,\"cap\":646376166,\"spreadPerc\":0.6,\"shareTxForMovement\":63988,\"shareTxUntilMovement\":27088,\"totalShares\":35000000,\"maxShares\":7000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":20550.031395175345,\"lastPrice\":20675.214770317896,\"playerShares\":8640000,\"playerAvgPx\":17259.047979930176,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":7.762462498626297,\"otlkMagForecast\":39.708464712173694,\"cap\":368430248,\"spreadPerc\":0.6,\"shareTxForMovement\":41416,\"shareTxUntilMovement\":33294,\"totalShares\":95900000,\"maxShares\":19200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":97279.99747064762,\"lastPrice\":96416.2722708408,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":8.182963789203377,\"otlkMagForecast\":62.058759198027225,\"cap\":379452666,\"spreadPerc\":1,\"shareTxForMovement\":50091,\"shareTxUntilMovement\":26983,\"totalShares\":67700000,\"maxShares\":13500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22685.398304747465,\"lastPrice\":22830.0926825952,\"playerShares\":4320000,\"playerAvgPx\":21969.303049379316,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":true,\"otlkMag\":10.22141864092054,\"otlkMagForecast\":62.21546598695482,\"cap\":566423920,\"spreadPerc\":1,\"shareTxForMovement\":105376,\"shareTxUntilMovement\":13440,\"totalShares\":48100000,\"maxShares\":9600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9447.599361752596,\"lastPrice\":9403.122792078762,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":9.030694855878744,\"otlkMagForecast\":38.90110611165483,\"cap\":79770412,\"spreadPerc\":0.4,\"shareTxForMovement\":83075,\"shareTxUntilMovement\":31124,\"totalShares\":57400000,\"maxShares\":11500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":22470.880769504274,\"lastPrice\":22565.89471401765,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":8.678253205750682,\"otlkMagForecast\":59.15636522519825,\"cap\":209630271,\"spreadPerc\":0.2,\"shareTxForMovement\":91104,\"shareTxUntilMovement\":59830,\"totalShares\":60400000,\"maxShares\":12100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8823.173578040945,\"lastPrice\":8772.875983193939,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.2028584007078775,\"otlkMagForecast\":45.26096718589836,\"cap\":133477999,\"spreadPerc\":0.5,\"shareTxForMovement\":105168,\"shareTxUntilMovement\":105168,\"totalShares\":116200000,\"maxShares\":23200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":42860.37839318978,\"lastPrice\":43072.32200588909,\"playerShares\":1951101,\"playerAvgPx\":45487.49739344721,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.90411924715448,\"otlkMagForecast\":42.06436336703196,\"cap\":504161011,\"spreadPerc\":0.9,\"shareTxForMovement\":106892,\"shareTxUntilMovement\":80075,\"totalShares\":39200000,\"maxShares\":7800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":34585.87271700963,\"lastPrice\":34719.719439140536,\"playerShares\":3060000,\"playerAvgPx\":24491.79260659981,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":9.32261245370439,\"otlkMagForecast\":59.73524265554497,\"cap\":59548278,\"spreadPerc\":1,\"shareTxForMovement\":40301,\"shareTxUntilMovement\":40301,\"totalShares\":34200000,\"maxShares\":6800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9283.46652706322,\"lastPrice\":9243.059136270149,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":5.934818106672257,\"otlkMagForecast\":44.5306263898741,\"cap\":20808594,\"spreadPerc\":0.8,\"shareTxForMovement\":84441,\"shareTxUntilMovement\":84441,\"totalShares\":75700000,\"maxShares\":15100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":9722.809680113522,\"lastPrice\":9770.888756557664,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":5.50717403636702,\"otlkMagForecast\":54.797358148640555,\"cap\":105106989,\"spreadPerc\":0.9,\"shareTxForMovement\":73289,\"shareTxUntilMovement\":73289,\"totalShares\":92300000,\"maxShares\":18500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":21213.98044499591,\"lastPrice\":21324.964417463703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":6.93134048298168,\"otlkMagForecast\":42.153765565272764,\"cap\":328095510,\"spreadPerc\":0.5,\"shareTxForMovement\":55003,\"shareTxUntilMovement\":55003,\"totalShares\":47600000,\"maxShares\":9500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11257.002891932067,\"lastPrice\":11304.601037244309,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":9.789035179609398,\"otlkMagForecast\":59.130267884642144,\"cap\":137431432,\"spreadPerc\":0.9,\"shareTxForMovement\":97525,\"shareTxUntilMovement\":73925,\"totalShares\":44200000,\"maxShares\":8800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17789.236351293886,\"lastPrice\":17695.39221231149,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":5.516456520441321,\"otlkMagForecast\":46.01273560908351,\"cap\":205948971,\"spreadPerc\":0.7,\"shareTxForMovement\":53495,\"shareTxUntilMovement\":53495,\"totalShares\":34000000,\"maxShares\":6800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":507.75531865769545,\"lastPrice\":516.6706154775532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":true,\"otlkMag\":5.6730009260001,\"otlkMagForecast\":50.15329028522582,\"cap\":78710291,\"spreadPerc\":1.1,\"shareTxForMovement\":37576,\"shareTxUntilMovement\":37576,\"totalShares\":93900000,\"maxShares\":18800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":19907.17059487186,\"lastPrice\":19741.637711238745,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":6.6069342046638475,\"otlkMagForecast\":43.53035594752943,\"cap\":64693126,\"spreadPerc\":0.6,\"shareTxForMovement\":48619,\"shareTxUntilMovement\":48619,\"totalShares\":41100000,\"maxShares\":8200000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4540.995636846248,\"lastPrice\":4520.907827241971,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":1.8727620474760833,\"otlkMagForecast\":48.95188642715296,\"cap\":21565578,\"spreadPerc\":0.4,\"shareTxForMovement\":83766,\"shareTxUntilMovement\":83766,\"totalShares\":29400000,\"maxShares\":5900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":19395.195092219637,\"lastPrice\":19671.80164868497,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.99,\"b\":false,\"otlkMag\":21.66928057623288,\"otlkMagForecast\":29.783925272737914,\"cap\":24409420,\"spreadPerc\":0.9,\"shareTxForMovement\":34332,\"shareTxUntilMovement\":3722,\"totalShares\":49100000,\"maxShares\":9800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1507.1443750577662,\"lastPrice\":1489.3197800963333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.67,\"b\":true,\"otlkMag\":5.474847277538375,\"otlkMagForecast\":51.755138032407665,\"cap\":74359644,\"spreadPerc\":0.7,\"shareTxForMovement\":45010,\"shareTxUntilMovement\":45010,\"totalShares\":43700000,\"maxShares\":8700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4294.676808645872,\"lastPrice\":4321.761781234942,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":true,\"otlkMag\":7.511780871781432,\"otlkMagForecast\":59.26875102014154,\"cap\":14659369,\"spreadPerc\":0.7,\"shareTxForMovement\":69946,\"shareTxUntilMovement\":69946,\"totalShares\":31300000,\"maxShares\":6300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5497.665628166573,\"lastPrice\":5590.64905899971,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.36,\"b\":false,\"otlkMag\":12.982238061416426,\"otlkMagForecast\":41.2876275701146,\"cap\":27041780,\"spreadPerc\":1.6,\"shareTxForMovement\":51169,\"shareTxUntilMovement\":3691,\"totalShares\":35300000,\"maxShares\":7100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1591.817965144542,\"lastPrice\":1603.5681816202216,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":5.433205781092068,\"otlkMagForecast\":47.265910738141535,\"cap\":58064666,\"spreadPerc\":1.2,\"shareTxForMovement\":74898,\"shareTxUntilMovement\":74898,\"totalShares\":13000000,\"maxShares\":2600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1078.652661198532,\"lastPrice\":1084.7596053984241,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":1.7956106270561265,\"otlkMagForecast\":50.48611971739439,\"cap\":13211236,\"spreadPerc\":0.6,\"shareTxForMovement\":102333,\"shareTxUntilMovement\":102333,\"totalShares\":33900000,\"maxShares\":6800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3045.6711790728573,\"lastPrice\":3000.7255153166516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.09,\"b\":false,\"otlkMag\":7.369601341420557,\"otlkMagForecast\":44.85731431366501,\"cap\":36089031,\"spreadPerc\":0.6,\"shareTxForMovement\":64331,\"shareTxUntilMovement\":64331,\"totalShares\":17900000,\"maxShares\":3600000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1789.6588062489225,\"lastPrice\":1827.6232633753025,\"playerShares\":10170000,\"playerAvgPx\":2555.5023236433,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.96,\"b\":true,\"otlkMag\":5.744877976163948,\"otlkMagForecast\":58.125164570487264,\"cap\":3795944,\"spreadPerc\":1.2,\"shareTxForMovement\":24328,\"shareTxUntilMovement\":24328,\"totalShares\":113200000,\"maxShares\":22600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":336.01949985136565,\"lastPrice\":332.51645484114397,\"playerShares\":9090000,\"playerAvgPx\":326.55975888507356,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.47,\"b\":true,\"otlkMag\":10.52048145930878,\"otlkMagForecast\":64.3750304827333,\"cap\":13144103,\"spreadPerc\":0.7,\"shareTxForMovement\":69023,\"shareTxUntilMovement\":66388,\"totalShares\":101200000,\"maxShares\":20200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":44678.88894700804,\"lastPrice\":44455.869676008275,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":6.11208602625136,\"otlkMagForecast\":41.83872181674847,\"cap\":375095736,\"spreadPerc\":0.7,\"shareTxForMovement\":189122,\"shareTxUntilMovement\":189122,\"totalShares\":16100000,\"maxShares\":3200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":25169.4339331605,\"lastPrice\":25079.56589510581,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":9.873218349755032,\"otlkMagForecast\":39.38499181954251,\"cap\":155887823,\"spreadPerc\":0.6,\"shareTxForMovement\":131539,\"shareTxUntilMovement\":65888,\"totalShares\":34300000,\"maxShares\":6900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":665024,\"lastUpdate\":1641538022867,\"ticksUntilCycle\":64}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"MM/dd hh:mm:ss\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641458367009","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}