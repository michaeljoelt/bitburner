{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":438,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.4520784789901422,\"hacking_speed_mult\":1.348273787026409,\"hacking_money_mult\":1.3170779854785868,\"hacking_grow_mult\":1.1973436231623515,\"hacking_exp\":3536944.349920584,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.5537239725194518,\"strength_mult\":1.376945166636704,\"defense_mult\":1.1973436231623515,\"dexterity_mult\":1.908446000958472,\"agility_mult\":1.257210804320469,\"charisma_mult\":1.4368123477948218,\"hacking_exp_mult\":1.5488837109228182,\"strength_exp_mult\":1.3170779854785868,\"defense_exp_mult\":1.3170779854785868,\"dexterity_exp_mult\":1.3170779854785868,\"agility_exp_mult\":1.3170779854785868,\"charisma_exp_mult\":1.3170779854785868,\"company_rep_mult\":1.1973436231623515,\"faction_rep_mult\":1.1973436231623515,\"money\":197337588.11953565,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1973436231623515,\"crime_success_mult\":1.1973436231623515,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":7200000,\"work_money_mult\":1.1973436231623515,\"hacknet_node_money_mult\":3.019812868580122,\"hacknet_node_purchase_cost_mult\":0.6377646244818076,\"hacknet_node_ram_cost_mult\":0.8336792476886373,\"hacknet_node_core_cost_mult\":0.8336792476886373,\"hacknet_node_level_cost_mult\":0.7086273605353417,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641590600369,\"totalPlaytime\":1280019400,\"playtimeSinceLastAug\":52539400,\"playtimeSinceLastBitnode\":1280019400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":591017588.1195357,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":196337588.11953565,\"work\":0,\"servers\":-394680000,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-792611.9999999726,\"codingcontract\":0,\"corporation\":0,\"crime\":992521.3408119349,\"gang\":0,\"hacking\":6805277120248.349,\"hacknet\":56810357186.21436,\"hacknet_expenses\":-99826406416.10703,\"hospitalization\":-4908000,\"infiltration\":0,\"sleeves\":0,\"stock\":38961181198.03331,\"total\":22607005785261.918,\"work\":3848213.646265653,\"servers\":-668378925818385.8,\"other\":1006999993800000,\"augmentations\":-322815283589138.3}},\"scriptProdSinceLastAug\":478953967,\"exploits\":[\"YoureNotMeantToAccessThis\"],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"11.9.2.0\",\"isConnectedTo\":true,\"maxRam\":2097152,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"ramUsed\":27.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stocks.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.932999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24457.81000002804,\"pid\":1,\"ramUsage\":23.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///f5afb8f3-e994-465c-a555-fb1a27607933\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"startup.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.938,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23793.610000027234,\"pid\":2,\"ramUsage\":3.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///ba0bcaf3-cb04-4a6f-9f2b-34a38e8dacaa\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///b1459c49-8053-4b58-8ed7-2d35e4a94da2\"}],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n\\tvar scriptName = \\\"autoHack.js\\\";\\n\\tvar vers = \\\"v1\\\";\\n\\tvar host = ns.getHostname();\\n\\tvar scriptRam = 2.6;\\n\\tns.tprint(\\\"script to copy/run = \\\" + scriptName + \\\"(ram: \\\" + scriptRam + \\\")\\\");\\n\\n\\tif (ns.args.length > 0) {\\n\\t\\tvar targets = ns.args;\\n\\t}\\n\\telse {\\n\\t\\tvar allServers = ns.scan();\\n\\t\\tvar targets = [];\\n\\n\\t\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\t\\tvar server = allServers[i];\\n\\t\\t\\tif (!server.startsWith(\\\"pserv\\\") && !server.startsWith(\\\"undefined\\\")) {\\n\\t\\t\\t\\ttargets.push(server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tif (ns.getServerNumPortsRequired(target) == 0) {\\n\\t\\t\\tns.kill(scriptName, target);\\n\\t\\t\\tvar targetRam = ns.getServerMaxRam(target) - ns.getServerUsedRam(target);\\n\\t\\t\\tawait ns.scp(scriptName, target);\\n\\t\\t\\tvar threads = Math.floor(targetRam / scriptRam);\\n\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": nuking \\\" + target);\\n\\t\\t\\tns.nuke(target);\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running \\\" + scriptName + \\\" on \\\" + target);\\n\\t\\t\\t\\tns.exec(scriptName, target, threads);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.tprint(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\"not enough ram (\\\" + targetRam + \\\")\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\t\\tawait ns.sleep(100000)\\n}\",\"filename\":\"copyRun_autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"copyRun_autoHack.js\",\"url\":\"blob:file:///a25a3362-bb32-4744-8ec1-33d8698ce906\"}],\"ramUsage\":4.5,\"server\":\"home\",\"_hash\":\"4a0216f1dd08791fd89bc8aa70b1057f7bda35127a6fb1b9075ce8ec33f007c1\",\"moduleSequenceNumber\":57,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tvar targets = ns.args;\\n\\tns.tprint(\\\"targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tns.killall(target);\\n\\t}\\n}\",\"filename\":\"killAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"killAll.js\",\"url\":\"blob:file:///17f0e10c-fa86-4cbc-a924-03a0c099c743\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"956f6d943689d201d62a4cd91cc22925f64cca50a178a48668eab3640ed9ca29\",\"moduleSequenceNumber\":58,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var base = ns.getServer;\\n\\tns.print(\\\"base = \\\" + base);\\n\\n\\tvar scriptName = \\\"copyRun_autoHack.js\\\";\\n\\tvar scriptRam = 2.6;//ns.getScriptRam(scriptName,base);\\n\\tns.print(\\\"script to copy/run = \\\" + scriptName + \\\"(ram: \\\" + scriptRam + \\\")\\\");\\n\\nif(ns.args.length>0){\\n\\tvar targets = ns.args;\\n}\\nelse{\\n\\tvar targets = ns.scan();\\n}\\n\\tns.print(\\\"targets = \\\" + targets);\\n\\n\\tfor (let i = 0; i < targets.length; i++) {\\n\\t\\tvar target = targets[i];\\n\\t\\tns.kill(scriptName, target);\\n\\t\\tvar targetRam = ns.getServerMaxRam(target)-ns.getServerUsedRam;\\n\\t\\tawait ns.scp(scriptName, target);\\n\\t\\tvar threads = Math.floor(targetRam / scriptRam);\\n\\t\\tns.print(\\\"nuking\\\");\\n\\t\\tif(threads>0){\\n\\t\\tns.print(\\\"running \\\"+scriptName);\\n\\t\\tns.exec(\\\"NUKE.exe\\\", target); //ns.connect(targets[i]);)\\n\\t\\tns.exec(scriptName,target, threads);\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tns.print(\\\"not enough available ram (\\\"+targetRam+\\\")\\\")\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"spread.js\",\"url\":\"blob:file:///dc846edf-f0bc-43c8-bc3e-872a5e1f3bda\"}],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"bc7ab2d6e95a0bb6c5103c55da2e3386abf6de5530b050dd7993acbdac26f440\",\"moduleSequenceNumber\":59,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: updateServerScripts.js \\nLast updated: 2022-01-06-2200\\n\\nDescription: \\n- set ups autoHack.js on each purchased server (if they start with \\\"pserv\\\")\\n- without arguments, just hacks joesguns. otherwise hacks each argument/server\\n- use run startup.js to automatically determine which servers to hack (run updateServerScripts within it)\\n*/\\nexport async function main(ns) {\\n\\n\\tlet script = \\\"autoHack.js\\\";\\n\\tlet scriptRam = ns.getScriptRam(script);\\n\\tlet targets = [\\\"joesguns\\\"];\\n\\n\\tif (ns.args.length > 0) {\\n\\t\\tlet arg = ns.args + \\\"\\\";\\n\\t\\tlet potentialTargets = arg.split(\\\" \\\");\\n\\t\\ttargets = [];\\n\\t\\tfor (let i = 0; i < potentialTargets.length; i++) {\\n\\t\\t\\tif (ns.serverExists(potentialTargets[i]) && ns.hasRootAccess(potentialTargets[i]) && (ns.getServerRequiredHackingLevel(potentialTargets[i]) <= ns.getHackingLevel())) {\\n\\t\\t\\t\\ttargets.push(potentialTargets[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tlet allServers = ns.scan();\\n\\tlet myServers = [];\\n\\n\\n\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\tlet server = allServers[i];\\n\\n\\t\\tif (server.startsWith(\\\"pserv\\\")) {\\n\\t\\t\\tmyServers.push(server);\\n\\t\\t}\\n\\t}\\n\\n\\n\\tns.tprint(\\\"targets = \\\" + targets);\\n\\tns.tprint(\\\"my servers = \\\" + myServers);\\n\\n\\tfor (let i = 0; i < myServers.length; i++) {\\n\\t\\tlet server = myServers[i];\\n\\t\\tns.tprint(\\\"current server = \\\" + server);\\n\\t\\tns.killall(server);\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tlet threads = Math.floor(freeRam / scriptRam / targets.length);\\n\\t\\tif (threads < 1) { threads = 1; }\\n\\t\\tns.tprint(\\\"freeRam:\\\" + freeRam + \\\" ; scriptRam:\\\" + scriptRam + \\\" ; threads to use:\\\" + threads);\\n\\t\\tawait ns.scp(script, \\\"home\\\", server);\\n\\t\\tfor (let c = 0; c < targets.length; c++) {\\n\\t\\t\\tlet target = targets[c];\\n\\t\\t\\tif (!target == \\\" \\\") {\\n\\t\\t\\t\\tns.tprint(\\\"Running \\\" + script + \\\" \\\" + target + \\\" on \\\" + server + \\\"with \\\" + threads + \\\" threads\\\");\\n\\t\\t\\t\\tns.exec(script, server, threads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tawait ns.sleep(100000)\\n}\",\"filename\":\"updateServerScripts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"updateServerScripts.js\",\"url\":\"blob:file:///7db45643-997a-4996-a4f6-a502a1fd5051\"}],\"ramUsage\":4.7,\"server\":\"home\",\"_hash\":\"369512ba67252e6a50876aeb471631b97b719a6528c2ed25bb117b352e56df51\",\"moduleSequenceNumber\":203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\nName: purchaseServers.js \\nLast updated: 2022-01-02-1741\\n*/\\nexport async function main(ns) {\\n    let script = \\\"autoHack.js\\\";\\n    // How much RAM each purchased server will have. In this case, it'll\\n    // be 8GB.\\n    let ram = 8;\\n \\n    // Iterator we'll use for our loop\\n \\n    let purchaseLimit = ns.getPurchasedServerLimit();\\n    ns.tprint(\\\"purchased server limit: \\\" + purchaseLimit);\\n    let allServers = ns.scan();\\n \\n    let serverCount = 0;\\n    //let targets = []\\n    //ns.tprint(\\\"length: \\\"+targets.length)\\n    for (let i = 0; i < allServers.length; i++) {\\n        let server = allServers[i];\\n        //ns.tprint(\\\"servername \\\"+server);\\n        if (server.startsWith(\\\"pserv\\\")) {\\n            ++serverCount;\\n        }\\n        //else{\\n        // targets = targets +\\\" \\\"+ server;\\n        //}\\n        ns.tprint(\\\"servers owned: \\\" + serverCount);\\n        //   ns.tprint(\\\"targets: \\\"+ targets);\\n    }\\n \\n \\n    ns.tprint(\\\"servers owned: \\\" + serverCount);\\n \\n    // Continuously try to purchase servers until we've reached the maximum\\n    // amount of servers\\n    while (serverCount < purchaseLimit) {\\n        // Check if we have enough money to purchase a server\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") / 2 > ns.getPurchasedServerCost(ram)) {\\n            ns.print(ns.getServerMoneyAvailable(\\\"home\\\") / 2 + \\\">\\\" + ns.getPurchasedServerCost(ram));\\n            // If we have enough money, then:\\n            //  1. Purchase the server\\n            //  2. Copy our hacking script onto the newly-purchased server\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\n            //  4. Increment our iterator to indicate that we've bought a new server\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + serverCount, ram);\\n            ns.print(\\\"purchased \\\" + hostname);\\n            await ns.scp(script, hostname);\\n            //    await ns.scp(\\\"copyRun_autoHack.js\\\", hostname);\\n            //ns.exec(\\\"copyRun_autoHack.js \\\" + targets, hostname, 1);\\n            ns.exec(script, hostname, 1, \\\"joesguns\\\");\\n            ++serverCount;\\n        }\\n        await ns.sleep(1000);\\n    }\\n \\n    // Continuously try to upgrade servers \\n    allServers = ns.scan();\\n    let myServers = [];\\n    for (let i = 0; i < allServers.length; i++) {\\n        let server = allServers[i];\\n        if (server.startsWith(\\\"pserv\\\")) {\\n            myServers.push(server);\\n        }\\n    }\\n \\n    ns.tprint(\\\"checking servers for upgrades: \\\" + myServers);\\n    let maxRam = ns.getPurchasedServerMaxRam();\\n \\n    for (let i = 0; i < myServers.length; i++) {\\n        let server = myServers[i];\\n        let upgradedServer = 0;\\n        ns.tprint(\\\"current server = \\\" + server);\\n \\n        let serverSize = ns.getServerMaxRam(server);\\n        ns.tprint(\\\"serverSize = \\\" + serverSize);\\n        let myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n        ns.tprint(\\\"myMoney = \\\" + myMoney);\\n        for (ram = maxRam; ram > serverSize; ram = ram / 2) {\\n            if ((myMoney / 2) > ns.getPurchasedServerCost(ram)) {\\n                ns.tprint(\\\"cost of server with ram \\\" + ram + \\\": \\\" + ns.getPurchasedServerCost(ram));\\n                ns.tprint((myMoney / 2) + \\\" > \\\" + ns.getPurchasedServerCost(ram));\\n                // let killed = false;\\n                // while (killed != true) {\\n                //     killed = ns.killall(server);\\n                //     //await ns.sleep(500000);\\n                // }\\n                ns.killall(server);\\n                await ns.sleep(10000);\\n                ns.deleteServer(server);\\n                ns.purchaseServer(server, ram);\\n                ns.tprint(server + \\\" upgraded from \\\" + serverSize + \\\" to \\\" + ram);\\n                await ns.scp(script, server);\\n                ns.exec(script, server, ns.getServerMaxRam(server) / 3, \\\"joesguns\\\");\\n                upgradedServer = 1;\\n                break;\\n            }\\n        }\\n \\n        if (upgradedServer != 1) {\\n            ns.tprint(\\\"cannot afford upgrading \\\" + server + \\\" (current RAM: \\\" + serverSize + \\\" current money: \\\" + myMoney + \\\" next upgrade cost\\\" + \\\"(for \\\" + serverSize * 2 + \\\"ram)\\\" + \\\": \\\" + ns.getPurchasedServerCost(serverSize * 2));\\n        }\\n \\n        // if (upgradedServer == 1) {\\n        //     let killed = false;\\n        //     while (killed != true) {\\n        //         killed = ns.killall(server);\\n        //         ns.killall(server);\\n        //         await ns.sleep(500000);\\n        //     }\\n \\n    }\\n    await ns.sleep(1000);\\n}\",\"filename\":\"purchaseServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"purchaseServers.js\",\"url\":\"blob:file:///1a78ae9f-24e6-45a2-9bd2-44a4f2a16e76\"}],\"ramUsage\":9.2,\"server\":\"home\",\"_hash\":\"1e5a318258ac9cfae83bb85d4582bc445ee2e9bb5a6ebe0d34fa8cdf7dbc940d\",\"moduleSequenceNumber\":202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/*\\nName: startup.js \\nLast updated: 2022-01-06-2200\\n*/\\nexport async function main(ns) {\\n    let script = \\\"autoHack.js\\\"; //to run early on (targetting joesguns) while purchasing each server\\n    let postScript = \\\"updateServerScripts.js\\\"; //to run after complete purchases/upgrades\\n    let hostScript = \\\"hostsetup.js\\\";\\n    let targets = [];\\n    let earlyGame = false;\\n\\n    // Start other scripts\\n    ns.exec(\\\"purchaseServers.js\\\", \\\"home\\\", 1);\\n    ns.exec(\\\"stocks.js\\\", \\\"home\\\", 1);\\n\\n    // Array of all servers that don't need any ports opened\\n    // to gain root access. These have 16 GB of RAM\\n    let servers0Port = [\\\"joesguns\\\", \\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"];\\n    let servers1Port = [\\\"neo-net\\\", \\\"zer0\\\", \\\"max-hardware\\\", \\\"iron-gym\\\", \\\"CSEC\\\"];\\n    let servers2Port = [\\\"omega-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"crush-fitness\\\", \\\"the-hub\\\", \\\"avmnite-02h\\\", \\\"johnson-ortho\\\"];\\n    let servers3Port = [\\\"netlink\\\", \\\"catalyst\\\", \\\"comptek\\\", \\\"summit-uni\\\", \\\"rothman-uni\\\", \\\"millenium-fitness\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\"];\\n    let servers4Port = [\\\"syscore\\\", \\\"lexo-corp\\\", \\\"aevum-police\\\", \\\"zb-def\\\", \\\"nova-med\\\", \\\"unitalife\\\", \\\"univ-energy\\\", \\\"alpha-ent\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\"];\\n    let servers5Port = [\\\"zb-institute\\\", \\\"galactic-cyber\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"taiyang-digital\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"aerocorp\\\", \\\"defcomm\\\", \\\"solaris\\\", \\\"deltaone\\\"];\\n\\n    // Copy our scripts onto each server that requires 0 ports\\n    // to gain root access. Then use nuke() to gain admin access and\\n    // run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers0Port.length; ++i) {\\n        let serv = servers0Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n        await ns.scp(script, serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 6);\\n        ns.exec(hostScript, \\\"home\\\", 1, serv);\\n    }\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 1 port\\n    // to gain root access. Then use brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers1Port.length; ++i) {\\n        let serv = servers1Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n        await ns.scp(script, serv);\\n        ns.brutessh(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n        ns.exec(hostScript, \\\"home\\\", 1, serv);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 2 port\\n    // to gain root access. Then use ftpcrack(), brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers2Port.length; ++i) {\\n        let serv = servers2Port[i];\\n        //targets.push(serv);\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n        ns.exec(hostScript, \\\"home\\\", 1, serv);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 3 port\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers3Port.length; ++i) {\\n        let serv = servers3Port[i];\\n        targets = targets + \\\" \\\" + serv;\\n\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.relaysmtp(serv);\\n        ns.nuke(serv);\\n        ns.exec(script, serv, 12);\\n    }\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n        await ns.sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 4 port\\n    if(earlyGame == true){\\n        targets = [];\\n    }\\n    for (let i = 0; i < servers4Port.length; ++i) {\\n        let serv = servers4Port[i];\\n        targets = targets + \\\" \\\" + serv;\\n        await ns.scp(script, serv);\\n        ns.ftpcrack(serv);\\n        ns.brutessh(serv);\\n        ns.relaysmtp(serv);\\n        ns.httpworm(serv);\\n        ns.nuke(serv);\\n        //ns.kill(postScript + \\\" \\\" + serv);\\n        ns.exec(script, serv, 12);\\n    }\\n\\n    ns.exec(postScript, \\\"home\\\", 1, targets);\\n}\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///c027694b-31e5-4ab3-ac5c-fac98b3576f2\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"169e6439c9101796a21511f1680948ee4f1cf85975a968c5efff333f485e1912\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nLast updated: 1/2/2022 2:15\\n*/\\n/*recursive code credit: milonti on reddit https://www.reddit.com/r/Bitburner/comments/9uuh3u/recursive_variables/ */\\nexport async function main(ns) {\\n\\tlet scanned = [];\\n\\tfunction recursive(host) {\\n\\t\\tscanned.push(host);\\n\\t\\tlet newScan = ns.scan(host);\\n\\t\\tfor (let x = 0; x < newScan.length; x++) {\\n\\t\\t\\tif (scanned.includes(newScan[x])) continue;\\n\\t\\t\\t//Insert recursing code below\\n\\t\\t\\tif (ns.getServerMaxMoney(host) > 0) {\\n\\t\\t\\t\\tns.tprint(\\\"server: \\\" + host + \\\" ; maxMoney: \\\" + ns.getServerMaxMoney(host));\\n\\t\\t\\t}\\n\\t\\t\\t//Insert recursing code above\\n\\t\\t\\trecursive(newScan[x])\\n\\t\\t}\\n\\t}\\n\\trecursive('home');\\n}\",\"filename\":\"recursiveScan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"recursiveScan.js\",\"url\":\"blob:file:///1b91e9ff-231a-48de-950a-6d85bf4898a0\"}],\"ramUsage\":1.9,\"server\":\"home\",\"_hash\":\"7ee2cca68833127f497e21d9e734303eae6d29dd16d1f3af89d10a2856323d02\",\"moduleSequenceNumber\":63,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nscript: hostsetup.js\\nlast updated: 2022-01-05 0128\\n*/\\nexport async function main(ns) {\\n\\tlet host = \\\"home\\\";\\n\\tif (ns.args.length > 0) {\\n\\t\\thost = ns.args[0];\\n\\t\\tawait ns.scp(\\\"autoHack.js\\\", \\\"home\\\", host);\\n\\t}\\n\\tlet servers0Port = [\\\"joesguns\\\", \\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"];\\n\\tlet servers1Port = [\\\"neo-net\\\", \\\"zer0\\\", \\\"max-hardware\\\", \\\"iron-gym\\\", \\\"CSEC\\\"];\\n\\tlet servers2Port = [\\\"omega-net\\\", \\\"silver-helix\\\", \\\"phantasy\\\", \\\"crush-fitness\\\", \\\"the-hub\\\", \\\"avmnite-02h\\\", \\\"johnson-ortho\\\"];\\n\\tlet servers3Port = [\\\"netlink\\\", \\\"catalyst\\\", \\\"comptek\\\", \\\"summit-uni\\\", \\\"rothman-uni\\\", \\\"millenium-fitness\\\", \\\"I.I.I.I\\\", \\\"rho-construction\\\"];\\n\\tlet servers4Port = [\\\"syscore\\\", \\\"lexo-corp\\\", \\\"aevum-police\\\", \\\"zb-def\\\", \\\"nova-med\\\", \\\"unitalife\\\", \\\"univ-energy\\\", \\\"alpha-ent\\\", \\\"global-pharm\\\", \\\"snap-fitness\\\"];\\n\\tlet servers5Port = [\\\"zb-institute\\\", \\\"galactic-cyber\\\", \\\"omnia\\\", \\\"icarus\\\", \\\"taiyang-digital\\\", \\\"zeus-med\\\", \\\"infocomm\\\", \\\"aerocorp\\\", \\\"defcomm\\\", \\\"solaris\\\", \\\"deltaone\\\"];\\n\\tlet servers = servers5Port.concat(servers4Port).concat(servers3Port).concat(servers2Port).concat(servers1Port).concat(servers0Port);\\n\\tlet hackableServers = [];\\n\\n\\tlet test = ns.getScriptRam(\\\"autoHack.js\\\");\\n\\tns.tprint(test);\\n\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\ttry {\\n\\t\\t\\t//if(servers[i]!=\\\"\\\"){\\n\\t\\t\\tns.exec(\\\"autoHack.js\\\", host, 1, servers[i]);\\n\\t\\t\\tns.kill(\\\"autoHack.js\\\", host, servers[i]);\\n\\t\\t\\tif (ns.hasRootAccess(servers[i]) && ns.getServerRequiredHackingLevel(servers[i]) <= ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers.push(servers[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch (e) {\\n\\t\\t\\tns.tprint(\\\"unhackable server discovered \\\" + servers[i] + \\\"error: \\\" + e);\\n\\t\\t}\\n\\t}\\n\\n\\tlet threads = (ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(\\\"autoHack.js\\\") / hackableServers.length;\\n\\tif (threads < 1) { threads = 1; }\\n\\tns.tprint(\\\"threads for each run: \\\" + threads);\\n\\tns.tprint(\\\"hackable: \\\" + hackableServers);\\n\\n\\tfor (let i = 0; i < hackableServers.length; i++) {\\n\\t\\ttry {\\n\\t\\t\\tns.exec(\\\"autoHack.js\\\", host, threads, hackableServers[i]);\\n\\t\\t}\\n\\t\\tcatch (e) {\\n\\t\\t\\tns.tprint(\\\"error attempting to hack 'hackable' server: \\\" + hackableServers[i] + \\\"error: \\\" + e);\\n\\t\\t}\\n\\t}\\n\\tawait ns.sleep(30000);\\n}\",\"filename\":\"hostSetup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hostsetup.js\",\"url\":\"blob:file:///2b31265f-fef8-4bf4-83d0-82bf723adf29\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"5e1e5b06fc9ba31e7927852998a525a0a57c8e393af4912c676e39c52547ccac\",\"moduleSequenceNumber\":64,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* base code credit: pwillia7 with modifications by JKelsey: https://www.reddit.com/r/Bitburner/comments/rkd3mu/stocksns_basic_stock_market_setup/hpmg8b7/*/\\n\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ************//\\n    var maxSharePer = 0.45                  // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                  //  percent probablity to buy symbol\\n    var stockVolPer = .03                 //   percent stock will move to buy\\n    var moneyKeep = 1000000000           //    min money to keep on hand\\n    var minSharePer = 5                 //     min shares to buy\\n    var orderMax = 1000000000000           //      max money to spend on a single order\\n    var profPer = 0.05                //       min profit percentage to sell\\n    var panicPer = 0.15              //        percentage loss to panic sell at\\n    //******************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            var forecast = ns.stock.getForecast(stock);\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //sell if only 40% chance increase\\n\\t\\tif (ns.stock.getForecast(stock) < 0.4) {\\n\\t\\t\\t//sell stock\\n            ns.toast(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n\\t\\t}     \\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var minBuy = 10000000;\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                if (shares * askPrice > minBuy) {\\n                    ns.stock.buy(stock, Math.min(shares, maxShares));\\n                }\\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///8cb6fed2-d283-43b4-aab4-2701f183e4d8\"}],\"ramUsage\":23.7,\"server\":\"home\",\"_hash\":\"91815d771c77c158aa5623ce679706a09965e1af7bc9c9f0d7c1ab0f63416b12\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nns.undocumented();\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///bf60c366-d6da-412d-8f51-a9b331e7186b\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6025130b99b87a3321a5dba3f0bd85ad02569317055c210436b1c2b4eb2254df\",\"moduleSequenceNumber\":66,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.983999999991615,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"3.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59067119310,\"moneyMax\":1476677982750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1217,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"34.5.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48263645323,\"moneyMax\":1206591133075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1189,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"13.4.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":26292226784,\"moneyMax\":657305669600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"55.2.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":14922345828,\"moneyMax\":373058645700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":59}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"37.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":21912375424,\"moneyMax\":547809385600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1162,\"serverGrowth\":93}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"82.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":17739729761,\"moneyMax\":443493244025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1112,\"serverGrowth\":58}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"86.2.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":17560934223,\"moneyMax\":439023355575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1089,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"16.2.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":22786790428,\"moneyMax\":569669760700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1244,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"1.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23746799053,\"moneyMax\":593669976325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1212,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131473.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"51.5.6.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1472954165,\"moneyMax\":36823854125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1016,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"6.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1541,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553034.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,47,35,43,50,47,9,32,27,2,45,31,33],[22,15,9,16,5,4,11,20,28,39,35,2,26],[13,30,24,41,11,21,19,16,8,2,4,5,26],[32,35,17,20,4,18,26,44,13,8,15,3,41],[30,18,24,2,16,8,27,11,38,16,22,25,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"50.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1159755550,\"moneyMax\":28993888750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934021.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[155,161,127,169,5,106,145,178,83,43,185,150,94,188,72,142,200,66,11,107,182,174,128],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"72.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":840147266,\"moneyMax\":21003681650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1015,\"serverGrowth\":72}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"63.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":814656414,\"moneyMax\":20366410350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":55}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"7.7.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":627856623,\"moneyMax\":15696415575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"33.0.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":718718778,\"moneyMax\":17967969450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":76}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"53.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":949488530,\"moneyMax\":23737213250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"60.8.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1159811042,\"moneyMax\":28995276050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"48.6.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":784385771,\"moneyMax\":19609644275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"34.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":520765699,\"moneyMax\":13019142475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"91.6.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":801491984,\"moneyMax\":20037299600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"31.8.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":841839266,\"moneyMax\":21045981650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684746.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"34.8.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1081311795,\"moneyMax\":27032794875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"24.1.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":988510554,\"moneyMax\":24712763850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"19.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1034405592,\"moneyMax\":25860139800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"97.7.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":952149127,\"moneyMax\":23803728175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"95.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":723379727,\"moneyMax\":18084493175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"16.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1637016969,\"moneyMax\":40925424225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"38.0.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1568494107,\"moneyMax\":39212352675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"99.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":1198473662,\"moneyMax\":29961841550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"69.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1452192140,\"moneyMax\":36304803500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"90.9.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1096406114,\"moneyMax\":27410152850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"63.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":734022024,\"moneyMax\":18350550600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":739,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"66.2.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1526.4100000002102,\"pid\":99,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":698935672,\"moneyMax\":17473391800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":485,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700620.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,20],[6,8],[4,11],[25,32]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"16.5.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":744266888,\"moneyMax\":18606672200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":570,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"1.4.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":354726075,\"moneyMax\":8868151875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":412,\"serverGrowth\":36}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"86.6.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1526.4100000002102,\"pid\":97,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":222692568,\"moneyMax\":5567314200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":377,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"77.9.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":1014965222,\"moneyMax\":25374130550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":752,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"99.8.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":204923817,\"moneyMax\":5123095425,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":470,\"serverGrowth\":41}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"92.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":454267564,\"moneyMax\":11356689100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":635,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"53.3.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1526.4100000002102,\"pid\":96,\"ramUsage\":2.45,\"server\":\"catalyst\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"catalyst\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":467921237,\"moneyMax\":11698030925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":53}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"46.2.0.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":67,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":39.65000000000002,\"minDifficulty\":13,\"moneyAvailable\":187779232,\"moneyMax\":4694480800,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":292,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"91.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"comptek\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":233723037,\"moneyMax\":5843075925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"56.4.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1526.4100000002102,\"pid\":95,\"ramUsage\":2.45,\"server\":\"netlink\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"netlink\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":394,\"serverGrowth\":50}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"72.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":68,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":53.750000000000014,\"minDifficulty\":18,\"moneyAvailable\":81968534,\"moneyMax\":2049213350,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":259,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"28.1.8.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":69,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.2819999999994667,\"minDifficulty\":1,\"moneyAvailable\":1331714.6684972555,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"76.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[6348864,636,7320,630]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":73803.79245278987,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.941,\"onlineExpGained\":65654.14662594927,\"onlineMoneyMade\":6348864,\"onlineRunningTime\":24457.81000002804,\"pid\":3,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.537999999999589,\"minDifficulty\":3,\"moneyAvailable\":913132.5354789792,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824163.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,7],[6,9,7],[7,9,5,9],[4,9,9,1,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"26.8.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[3073440,762,6288,558]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":65491.045861201266,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.945,\"onlineExpGained\":58175.7218181018,\"onlineMoneyMade\":3073440,\"onlineRunningTime\":24457.81000002804,\"pid\":4,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":5.725999999999626,\"minDifficulty\":3,\"moneyAvailable\":947227.7771042893,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"3.0.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[4940274,492,4974,594]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":68253.06921310852,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.947,\"onlineExpGained\":60418.05879686619,\"onlineMoneyMade\":4940274,\"onlineRunningTime\":24457.81000002804,\"pid\":5,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"joesguns\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":16.24599999999999,\"minDifficulty\":5,\"moneyAvailable\":331083.2590881357,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"75.3.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[8004168,1224,1968,408]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59265.02107015328,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.949999999997,\"onlineExpGained\":52619.86019491588,\"onlineMoneyMade\":8004168,\"onlineRunningTime\":24457.81000002804,\"pid\":6,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"zer0\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.707999999999727,\"minDifficulty\":8,\"moneyAvailable\":921930.1809209564,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"36.7.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[3384204,822,3150,420]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60680.622154488025,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.950999999997,\"onlineExpGained\":53992.18355023758,\"onlineMoneyMade\":3384204,\"onlineRunningTime\":24457.81000002804,\"pid\":7,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":11.391999999999328,\"minDifficulty\":7,\"moneyAvailable\":867019.0148980614,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"17.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[5518536,1020,3084,492]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":75369.65441529329,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.952999999998,\"onlineExpGained\":67178.02151550916,\"onlineMoneyMade\":5518536,\"onlineRunningTime\":24457.81000002804,\"pid\":8,\"ramUsage\":2.45,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"neo-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":13.009999999999655,\"minDifficulty\":8,\"moneyAvailable\":1041842.9933747157,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.4.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[19722984,468,0,60]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1981.4766541380957,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.956,\"onlineExpGained\":8944.295394305238,\"onlineMoneyMade\":19722984,\"onlineRunningTime\":3692.4099999988343,\"pid\":9,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.884000000000512,\"minDifficulty\":10,\"moneyAvailable\":901027.8604782224,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"32.3.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[3459786,792,2820,336]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":44232.694663742644,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.959,\"onlineExpGained\":39361.46800825475,\"onlineMoneyMade\":3459786,\"onlineRunningTime\":24457.81000002804,\"pid\":10,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.645999999999173,\"minDifficulty\":5,\"moneyAvailable\":1017239.1227060904,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"29.5.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[5012376,1116,2184,294]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":40571.05064489379,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.961,\"onlineExpGained\":35832.096256754536,\"onlineMoneyMade\":5012376,\"onlineRunningTime\":24457.81000002804,\"pid\":11,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.463999999999304,\"minDifficulty\":5,\"moneyAvailable\":1016695.3424602185,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"80.2.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[14126064,480,132,144]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3451.0930900851345,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.964,\"onlineExpGained\":9293.736512745887,\"onlineMoneyMade\":14126064,\"onlineRunningTime\":3692.4099999988343,\"pid\":12,\"ramUsage\":2.45,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"phantasy\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.215999999999918,\"minDifficulty\":7,\"moneyAvailable\":998891.7048008732,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"27.6.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[10850892,1524,2640,324]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50530.73994750802,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.965999999997,\"onlineExpGained\":44745.255425796844,\"onlineMoneyMade\":10850892,\"onlineRunningTime\":24457.81000002804,\"pid\":13,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.5659999999999,\"minDifficulty\":5,\"moneyAvailable\":920574.0870048963,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"25.5.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[12242820,96,0,72]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1286.720432249605,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.967999999997,\"onlineExpGained\":3135.1052342212383,\"onlineMoneyMade\":12242820,\"onlineRunningTime\":3692.4099999988343,\"pid\":14,\"ramUsage\":2.45,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"omega-net\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":14.92400000000004,\"minDifficulty\":11,\"moneyAvailable\":33477154,\"moneyMax\":1557642975,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":197,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"24.3.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":42.400000000000034,\"minDifficulty\":14,\"moneyAvailable\":50382399,\"moneyMax\":1259559975,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":237,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"5.9.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[19697928,1212,984,384]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":49274.2341439988,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.969999999998,\"onlineExpGained\":43705.079767627685,\"onlineMoneyMade\":19697928,\"onlineRunningTime\":24457.81000002804,\"pid\":15,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":15.169999999999838,\"minDifficulty\":10,\"moneyAvailable\":1004891.94935964,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"85.2.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"80.3.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-784944.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[150,99,41,164,54,156,62,98,6,198,55,127,121,142,165,93],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"59.9.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":702,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"72.9.8.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"87.0.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,888,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":828,\"onlineMoneyMade\":0,\"onlineRunningTime\":1526.4100000002102,\"pid\":98,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.7520000000000016,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":344,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"36.4.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":29.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,2148,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2280.9281625,\"offlineMoneyMade\":0,\"offlineRunningTime\":28072.971999999998,\"onlineExpGained\":1719,\"onlineMoneyMade\":0,\"onlineRunningTime\":3692.4099999988343,\"pid\":16,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":5.841999999999941,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"79.8.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"20.8.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":3.06199999999952,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"19.4.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"46.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"92.2.9.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1021.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[46208505,341,17050,8525]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":258381.91613524055,\"onlineMoneyMade\":46208505,\"onlineRunningTime\":1516.410000000208,\"pid\":101,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":341,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5861688,822,408,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4365.478042728825,\"onlineMoneyMade\":5861688,\"onlineRunningTime\":1516.410000000208,\"pid\":102,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,642,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5230.309374813623,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":103,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,564,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4633.87058645768,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":104,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,336,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4351.829002000059,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":105,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,294,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3170.4525903305553,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":106,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,252,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2691.893708771226,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":107,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,186,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2806.3925437288576,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":108,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,138,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2104.7944077966436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":109,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,168,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1734.7759456525678,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":110,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[42354,12,96,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1829.5149670169799,\"onlineMoneyMade\":42354,\"onlineRunningTime\":1516.410000000208,\"pid\":111,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,954,0,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":805.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":112,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[993470,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":206.25692330402882,\"onlineMoneyMade\":993470,\"onlineRunningTime\":1516.410000000208,\"pid\":113,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1562293,39,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":660.6581825339088,\"onlineMoneyMade\":1562293,\"onlineRunningTime\":1516.410000000208,\"pid\":114,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1105736,40,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":626.9584155423823,\"onlineMoneyMade\":1105736,\"onlineRunningTime\":1516.410000000208,\"pid\":115,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":116,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":117,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,59,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45.75,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":118,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28.09191611694965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":119,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":120,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":121,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1516.410000000208,\"pid\":122,\"ramUsage\":2.45,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-0\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"67.9.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1021.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,17050,8525]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":254982.1540808295,\"onlineMoneyMade\":0,\"onlineRunningTime\":1506.4100000002056,\"pid\":123,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":341,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5977296,828,402,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4365.478042728825,\"onlineMoneyMade\":5977296,\"onlineRunningTime\":1505.4100000002054,\"pid\":124,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,636,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5184.429468017012,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":125,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,552,48]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4587.9906796610685,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":126,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,336,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4351.829002000059,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":127,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,300,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3170.4525903305553,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":128,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,246,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2632.07384857631,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":129,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,180,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2806.3925437288576,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":130,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,138,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2104.7944077966436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":131,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,168,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1734.7759456525678,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":132,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[39714,12,96,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1829.5149670169799,\"onlineMoneyMade\":39714,\"onlineRunningTime\":1505.4100000002054,\"pid\":133,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,936,0,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":792,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":134,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[1077406,9,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":220.00738485763074,\"onlineMoneyMade\":1077406,\"onlineRunningTime\":1505.4100000002054,\"pid\":135,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1535885,38,1,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":660.6581825339088,\"onlineMoneyMade\":1535885,\"onlineRunningTime\":1505.4100000002054,\"pid\":136,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1032050,39,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":614.6651132768454,\"onlineMoneyMade\":1032050,\"onlineRunningTime\":1505.4100000002054,\"pid\":137,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":138,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":139,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,57,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":140,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28.09191611694965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":141,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":142,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":143,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1505.4100000002054,\"pid\":144,\"ramUsage\":2.45,\"server\":\"pserv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-1\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"39.3.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1021.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,17050,8525]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":254982.1540808295,\"onlineMoneyMade\":0,\"onlineRunningTime\":1496.4100000002034,\"pid\":145,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":341,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5711076,810,402,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4303.114070689843,\"onlineMoneyMade\":5711076,\"onlineRunningTime\":1494.410000000203,\"pid\":146,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,624,48]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5138.549561220401,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":147,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,558,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4587.9906796610685,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":148,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,330,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4278.069188406837,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":149,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,294,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3110.632730135639,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":150,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,246,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2632.07384857631,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":151,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,180,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2718.692776737331,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":152,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[554706,114,102,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3244.8913786864914,\"onlineMoneyMade\":554706,\"onlineRunningTime\":1494.410000000203,\"pid\":153,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[907224,150,120,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2751.7135689661422,\"onlineMoneyMade\":907224,\"onlineRunningTime\":1494.410000000203,\"pid\":154,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[21948,6,96,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1727.8752466271476,\"onlineMoneyMade\":21948,\"onlineRunningTime\":1494.410000000203,\"pid\":155,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,924,0,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":783,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":156,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[953715,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":206.25692330402882,\"onlineMoneyMade\":953715,\"onlineRunningTime\":1494.410000000203,\"pid\":157,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1512374,38,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643.7182291356035,\"onlineMoneyMade\":1512374,\"onlineRunningTime\":1494.410000000203,\"pid\":158,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1012645,39,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":614.6651132768454,\"onlineMoneyMade\":1012645,\"onlineRunningTime\":1494.410000000203,\"pid\":159,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":160,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":161,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,58,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":162,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28.09191611694965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":163,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":164,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":165,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1494.410000000203,\"pid\":166,\"ramUsage\":2.45,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-2\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"49.5.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1021.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,16709,8525]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251582.39202641844,\"onlineMoneyMade\":0,\"onlineRunningTime\":1486.410000000201,\"pid\":167,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":341,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5774214,816,396,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4303.114070689843,\"onlineMoneyMade\":5774214,\"onlineRunningTime\":1483.4100000002004,\"pid\":168,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,630,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5138.549561220401,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":169,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,552,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4542.110772864457,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":170,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,330,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4278.069188406837,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":171,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,276,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3050.812869940723,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":172,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,240,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2572.253988381394,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":173,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[556680,102,150,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3771.089980635652,\"onlineMoneyMade\":556680,\"onlineRunningTime\":1483.4100000002004,\"pid\":174,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[514956,108,102,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3157.1916116949646,\"onlineMoneyMade\":514956,\"onlineRunningTime\":1483.4100000002004,\"pid\":175,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[778290,126,126,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2572.253988381394,\"onlineMoneyMade\":778290,\"onlineRunningTime\":1483.4100000002004,\"pid\":176,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[19884,6,96,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1727.8752466271476,\"onlineMoneyMade\":19884,\"onlineRunningTime\":1483.4100000002004,\"pid\":177,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,912,0,30]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":774,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":178,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[950010,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":206.25692330402882,\"onlineMoneyMade\":950010,\"onlineRunningTime\":1483.4100000002004,\"pid\":179,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1435985,38,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643.7182291356035,\"onlineMoneyMade\":1435985,\"onlineRunningTime\":1483.4100000002004,\"pid\":180,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[945365,38,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":602.3718110113085,\"onlineMoneyMade\":945365,\"onlineRunningTime\":1483.4100000002004,\"pid\":181,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":182,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":183,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,56,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44.25,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":184,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28.09191611694965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":185,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":186,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":187,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1483.4100000002004,\"pid\":188,\"ramUsage\":2.45,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-3\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"68.8.0.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":509.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,8500,4250]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":127117.2029141965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1476.4100000001988,\"pid\":189,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":170,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2706405,384,204,15]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2089.1930633059396,\"onlineMoneyMade\":2706405,\"onlineRunningTime\":1472.410000000198,\"pid\":190,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,312,21]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2546.334827211895,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":191,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,276,21]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2271.0553864322287,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":192,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,162,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102.154687406808,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":193,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,147,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1555.3163650678196,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":194,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[825879,108,87,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2033.8752466271487,\"onlineMoneyMade\":825879,\"onlineRunningTime\":1472.410000000198,\"pid\":195,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[261582,48,75,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1841.6951068220626,\"onlineMoneyMade\":261582,\"onlineRunningTime\":1472.410000000198,\"pid\":196,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[272229,60,45,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1622.4456893432457,\"onlineMoneyMade\":272229,\"onlineRunningTime\":1472.410000000198,\"pid\":197,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[355911,60,63,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.2170640932388,\"onlineMoneyMade\":355911,\"onlineRunningTime\":1472.410000000198,\"pid\":198,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[8997,3,45,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.1177631186576,\"onlineMoneyMade\":8997,\"onlineRunningTime\":1472.410000000198,\"pid\":199,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,450,0,15]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":382.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":200,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[961421,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":206.25692330402882,\"onlineMoneyMade\":961421,\"onlineRunningTime\":1472.410000000198,\"pid\":201,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1409839,37,1,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643.7182291356035,\"onlineMoneyMade\":1409839,\"onlineRunningTime\":1472.410000000198,\"pid\":202,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[924508,38,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":602.3718110113085,\"onlineMoneyMade\":924508,\"onlineRunningTime\":1472.410000000198,\"pid\":203,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":204,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1472.410000000198,\"pid\":205,\"ramUsage\":2.45,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-4\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"17.5.6.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":509.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[28693620,3060,7310,4250]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":145761.05934161195,\"onlineMoneyMade\":28693620,\"onlineRunningTime\":1466.4100000001965,\"pid\":206,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":170,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2690958,393,198,15]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2099.58705864577,\"onlineMoneyMade\":2690958,\"onlineRunningTime\":1461.4100000001954,\"pid\":207,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[10526319,141,264,21]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3257.4733825593667,\"onlineMoneyMade\":10526319,\"onlineRunningTime\":1461.4100000001954,\"pid\":208,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[835461,108,234,24]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2798.674314593256,\"onlineMoneyMade\":835461,\"onlineRunningTime\":1461.4100000001954,\"pid\":209,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[686271,108,129,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3024.1523573220734,\"onlineMoneyMade\":686271,\"onlineRunningTime\":1461.4100000001954,\"pid\":210,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[441045,75,120,9]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2033.8752466271487,\"onlineMoneyMade\":441045,\"onlineRunningTime\":1461.4100000001954,\"pid\":211,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[732042,96,81,15]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1914.2355262373164,\"onlineMoneyMade\":732042,\"onlineRunningTime\":1461.4100000001954,\"pid\":212,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[278802,54,72,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1885.544990317826,\"onlineMoneyMade\":278802,\"onlineRunningTime\":1461.4100000001954,\"pid\":213,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[198729,42,54,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1447.0461553601922,\"onlineMoneyMade\":198729,\"onlineRunningTime\":1461.4100000001954,\"pid\":214,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[289506,48,66,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1166.4872738008646,\"onlineMoneyMade\":289506,\"onlineRunningTime\":1461.4100000001954,\"pid\":215,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,48,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.1177631186576,\"onlineMoneyMade\":0,\"onlineRunningTime\":1461.4100000001954,\"pid\":216,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,444,0,15]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":378,\"onlineMoneyMade\":0,\"onlineRunningTime\":1461.4100000001954,\"pid\":217,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[749810,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":174.172513012291,\"onlineMoneyMade\":749810,\"onlineRunningTime\":1461.4100000001954,\"pid\":218,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1386451,37,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":626.7782757372981,\"onlineMoneyMade\":1386451,\"onlineRunningTime\":1461.4100000001954,\"pid\":219,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[871467,40,10,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":614.6651132768454,\"onlineMoneyMade\":871467,\"onlineRunningTime\":1461.4100000001954,\"pid\":220,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1461.4100000001954,\"pid\":221,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1461.4100000001954,\"pid\":222,\"ramUsage\":2.45,\"server\":\"pserv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-5\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"31.5.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":254.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[8416445,1785,3315,2295]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":73727.97769023395,\"onlineMoneyMade\":8416445,\"onlineRunningTime\":1456.4100000001943,\"pid\":223,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":85,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[888074,125,67,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.5390273155394,\"onlineMoneyMade\":888074,\"onlineRunningTime\":1450.410000000193,\"pid\":224,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[3059608,47,86,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1078.1778097203562,\"onlineMoneyMade\":3059608,\"onlineRunningTime\":1450.410000000193,\"pid\":225,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[230267,30,81,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":902.3048336666805,\"onlineMoneyMade\":230267,\"onlineRunningTime\":1450.410000000193,\"pid\":226,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[210381,34,43,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":983.4641812429527,\"onlineMoneyMade\":210381,\"onlineRunningTime\":1450.410000000193,\"pid\":227,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[132707,23,41,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":667.9884388432286,\"onlineMoneyMade\":132707,\"onlineRunningTime\":1450.410000000193,\"pid\":228,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[237966,33,29,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":648.0484854449232,\"onlineMoneyMade\":237966,\"onlineRunningTime\":1450.410000000193,\"pid\":229,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[72533,14,25,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":584.6651132768461,\"onlineMoneyMade\":72533,\"onlineRunningTime\":1450.410000000193,\"pid\":230,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[69949,16,17,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":496.96534628531913,\"onlineMoneyMade\":69949,\"onlineRunningTime\":1450.410000000193,\"pid\":231,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[94563,17,21,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":388.82909126695426,\"onlineMoneyMade\":94563,\"onlineRunningTime\":1450.410000000193,\"pid\":232,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,16,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":271.0392543728858,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":233,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,146,0,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":124.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":234,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[962891,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":201.67343611949485,\"onlineMoneyMade\":962891,\"onlineRunningTime\":1450.410000000193,\"pid\":235,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1314964,37,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":626.7782757372981,\"onlineMoneyMade\":1314964,\"onlineRunningTime\":1450.410000000193,\"pid\":236,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[799621,36,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":577.7852064802347,\"onlineMoneyMade\":799621,\"onlineRunningTime\":1450.410000000193,\"pid\":237,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":238,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.586604531073817,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":239,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\"],\"dataMap\":{\"avmnite-02h\":[0,55,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":240,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28.09191611694965,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":241,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1450.410000000193,\"pid\":242,\"ramUsage\":2.45,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-6\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"9.2.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2311302,756,1848,1008]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36011.55583733951,\"onlineMoneyMade\":2311302,\"onlineRunningTime\":1446.410000000192,\"pid\":243,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":42,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[882756,128,64,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":686.0036924288163,\"onlineMoneyMade\":882756,\"onlineRunningTime\":1439.4100000001904,\"pid\":244,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[2594921,42,88,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1047.5912051892822,\"onlineMoneyMade\":2594921,\"onlineRunningTime\":1439.4100000001904,\"pid\":245,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[229646,33,79,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":909.951484799449,\"onlineMoneyMade\":229646,\"onlineRunningTime\":1439.4100000001904,\"pid\":246,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[196013,33,43,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":971.1708789774158,\"onlineMoneyMade\":196013,\"onlineRunningTime\":1439.4100000001904,\"pid\":247,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[122170,22,40,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":648.0484854449232,\"onlineMoneyMade\":122170,\"onlineRunningTime\":1439.4100000001904,\"pid\":248,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[233900,35,28,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":658.0184621440759,\"onlineMoneyMade\":233900,\"onlineRunningTime\":1439.4100000001904,\"pid\":249,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[68764,14,24,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.048485444925,\"onlineMoneyMade\":68764,\"onlineRunningTime\":1439.4100000001904,\"pid\":250,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[64855,15,16,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":482.34871845339796,\"onlineMoneyMade\":64855,\"onlineRunningTime\":1439.4100000001904,\"pid\":251,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[85682,16,21,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":378.8591145678016,\"onlineMoneyMade\":85682,\"onlineRunningTime\":1439.4100000001904,\"pid\":252,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[7100,2,15,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.97920777119117,\"onlineMoneyMade\":7100,\"onlineRunningTime\":1439.4100000001904,\"pid\":253,\"ramUsage\":2.45,\"server\":\"pserv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-7\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"41.5.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3618132,798,1764,1008]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35592.8168159751,\"onlineMoneyMade\":3618132,\"onlineRunningTime\":1436.4100000001897,\"pid\":254,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":42,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[871856,128,63,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.5390273155394,\"onlineMoneyMade\":871856,\"onlineRunningTime\":1428.2100000001878,\"pid\":255,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[2195629,38,89,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1024.6512517909766,\"onlineMoneyMade\":2195629,\"onlineRunningTime\":1428.2100000001878,\"pid\":256,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[184605,27,80,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":871.7182291356064,\"onlineMoneyMade\":184605,\"onlineRunningTime\":1428.2100000001878,\"pid\":257,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[183868,32,43,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":958.8775767118789,\"onlineMoneyMade\":183868,\"onlineRunningTime\":1428.2100000001878,\"pid\":258,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[115068,21,40,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":638.0785087457706,\"onlineMoneyMade\":115068,\"onlineRunningTime\":1428.2100000001878,\"pid\":259,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[192043,28,30,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":608.1685786483126,\"onlineMoneyMade\":192043,\"onlineRunningTime\":1428.2100000001878,\"pid\":260,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[54270,11,25,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":540.8152297810826,\"onlineMoneyMade\":54270,\"onlineRunningTime\":1428.2100000001878,\"pid\":261,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[51891,12,18,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":453.11546278955564,\"onlineMoneyMade\":51891,\"onlineRunningTime\":1428.2100000001878,\"pid\":262,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[85085,17,21,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":388.82909126695426,\"onlineMoneyMade\":85085,\"onlineRunningTime\":1428.2100000001878,\"pid\":263,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[6697,2,15,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.97920777119117,\"onlineMoneyMade\":6697,\"onlineRunningTime\":1428.2100000001878,\"pid\":264,\"ramUsage\":2.45,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-8\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"4.3.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1825299,441,882,504]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18215.14742935196,\"onlineMoneyMade\":1825299,\"onlineRunningTime\":1426.4100000001874,\"pid\":265,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":21,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[814434,120,66,5]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":661.7510366358783,\"onlineMoneyMade\":814434,\"onlineRunningTime\":1417.2100000001853,\"pid\":266,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1820389,37,88,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1009.3579495254396,\"onlineMoneyMade\":1820389,\"onlineRunningTime\":1417.2100000001853,\"pid\":267,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[146444,22,81,7]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":841.1316246045324,\"onlineMoneyMade\":146444,\"onlineRunningTime\":1417.2100000001853,\"pid\":268,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[166409,30,43,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":934.290972180805,\"onlineMoneyMade\":166409,\"onlineRunningTime\":1417.2100000001853,\"pid\":269,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[101267,19,41,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":628.1085320466179,\"onlineMoneyMade\":101267,\"onlineRunningTime\":1417.2100000001853,\"pid\":270,\"ramUsage\":2.45,\"server\":\"pserv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-9\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"99.1.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[133628,34,80,50]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1635.0761786610367,\"onlineMoneyMade\":133628,\"onlineRunningTime\":1406.2100000001828,\"pid\":273,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1728512,248,128,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1337.360733724864,\"onlineMoneyMade\":1728512,\"onlineRunningTime\":1406.2100000001828,\"pid\":274,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[2919750,68,176,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1972.8359922542681,\"onlineMoneyMade\":2919750,\"onlineRunningTime\":1406.2100000001828,\"pid\":275,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[266472,44,158,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1666.9699469435277,\"onlineMoneyMade\":266472,\"onlineRunningTime\":1406.2100000001828,\"pid\":276,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[274378,50,88,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1770.2355262373148,\"onlineMoneyMade\":274378,\"onlineRunningTime\":1406.2100000001828,\"pid\":277,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[213254,42,80,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1276.1570174915412,\"onlineMoneyMade\":213254,\"onlineRunningTime\":1406.2100000001828,\"pid\":278,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[374782,62,56,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1236.2771106949306,\"onlineMoneyMade\":374782,\"onlineRunningTime\":1406.2100000001828,\"pid\":279,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[107676,24,48,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1081.6304595621652,\"onlineMoneyMade\":107676,\"onlineRunningTime\":1406.2100000001828,\"pid\":280,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[81704,20,36,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":847.7644142514266,\"onlineMoneyMade\":81704,\"onlineRunningTime\":1406.2100000001828,\"pid\":281,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[117018,24,44,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":697.8983689406873,\"onlineMoneyMade\":117018,\"onlineRunningTime\":1406.2100000001828,\"pid\":282,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[6802,2,30,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":6802,\"onlineRunningTime\":1406.2100000001828,\"pid\":283,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,278,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":238.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1406.2100000001828,\"pid\":284,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[912460,8,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":201.67343611949485,\"onlineMoneyMade\":912460,\"onlineRunningTime\":1406.2100000001828,\"pid\":285,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1174238,36,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":609.8383223389928,\"onlineMoneyMade\":1174238,\"onlineRunningTime\":1406.2100000001828,\"pid\":286,\"ramUsage\":2.45,\"server\":\"pserv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-10\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"93.3.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[237556,88,156,96]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.792077711905,\"onlineMoneyMade\":237556,\"onlineRunningTime\":1395.2100000001803,\"pid\":288,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3481252,500,252,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2674.721467449728,\"onlineMoneyMade\":3481252,\"onlineRunningTime\":1395.2100000001803,\"pid\":289,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[4622148,124,348,32]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3853.912170915314,\"onlineMoneyMade\":4622148,\"onlineRunningTime\":1395.2100000001803,\"pid\":290,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[513940,92,316,28]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3333.9398938870554,\"onlineMoneyMade\":513940,\"onlineRunningTime\":1395.2100000001803,\"pid\":291,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[454444,84,180,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3392.951425288187,\"onlineMoneyMade\":454444,\"onlineRunningTime\":1395.2100000001803,\"pid\":292,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[338292,68,160,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2392.79440779664,\"onlineMoneyMade\":338292,\"onlineRunningTime\":1395.2100000001803,\"pid\":293,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[659988,112,108,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2352.9145010000293,\"onlineMoneyMade\":659988,\"onlineRunningTime\":1395.2100000001803,\"pid\":294,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[178008,40,100,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2104.794407796646,\"onlineMoneyMade\":178008,\"onlineRunningTime\":1395.2100000001803,\"pid\":295,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[119548,28,76,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1578.595805847484,\"onlineMoneyMade\":119548,\"onlineRunningTime\":1395.2100000001803,\"pid\":296,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[208412,44,88,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1355.916831084764,\"onlineMoneyMade\":208412,\"onlineRunningTime\":1395.2100000001803,\"pid\":297,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[12352,4,60,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1084.1570174915432,\"onlineMoneyMade\":12352,\"onlineRunningTime\":1395.2100000001803,\"pid\":298,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,548,0,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":471,\"onlineMoneyMade\":0,\"onlineRunningTime\":1395.2100000001803,\"pid\":299,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[683734,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169.58902582775704,\"onlineMoneyMade\":683734,\"onlineRunningTime\":1395.2100000001803,\"pid\":300,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1149435,35,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592.8983689406875,\"onlineMoneyMade\":1149435,\"onlineRunningTime\":1395.2100000001803,\"pid\":301,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[643108,34,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":553.1986019491609,\"onlineMoneyMade\":643108,\"onlineRunningTime\":1395.2100000001803,\"pid\":302,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1395.2100000001803,\"pid\":303,\"ramUsage\":2.45,\"server\":\"pserv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-11\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"94.1.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[151692,42,80,48]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1694.8960388559526,\"onlineMoneyMade\":151692,\"onlineRunningTime\":1384.2100000001778,\"pid\":305,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1646712,238,128,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1302.7140825920956,\"onlineMoneyMade\":1646712,\"onlineRunningTime\":1384.2100000001778,\"pid\":306,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1747284,58,176,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1896.369480926583,\"onlineMoneyMade\":1747284,\"onlineRunningTime\":1384.2100000001778,\"pid\":307,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[181716,34,158,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1590.5034356158426,\"onlineMoneyMade\":181716,\"onlineRunningTime\":1384.2100000001778,\"pid\":308,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[222570,44,88,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1696.4757126440934,\"onlineMoneyMade\":222570,\"onlineRunningTime\":1384.2100000001778,\"pid\":309,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[153704,32,80,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1176.4572505000147,\"onlineMoneyMade\":153704,\"onlineRunningTime\":1384.2100000001778,\"pid\":310,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[291770,52,58,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1156.5172971017093,\"onlineMoneyMade\":291770,\"onlineRunningTime\":1384.2100000001778,\"pid\":311,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[136744,32,44,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1140.09697088985,\"onlineMoneyMade\":136744,\"onlineRunningTime\":1384.2100000001778,\"pid\":312,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[120184,30,30,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":935.4641812429536,\"onlineMoneyMade\":120184,\"onlineRunningTime\":1384.2100000001778,\"pid\":313,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[105574,24,42,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":677.958415542382,\"onlineMoneyMade\":105574,\"onlineRunningTime\":1384.2100000001778,\"pid\":314,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,30,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":508.1986019491609,\"onlineMoneyMade\":0,\"onlineRunningTime\":1384.2100000001778,\"pid\":315,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,272,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234,\"onlineMoneyMade\":0,\"onlineRunningTime\":1384.2100000001778,\"pid\":316,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[814196,7,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":183.33948738135896,\"onlineMoneyMade\":814196,\"onlineRunningTime\":1384.2100000001778,\"pid\":317,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1085779,35,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592.8983689406875,\"onlineMoneyMade\":1085779,\"onlineRunningTime\":1384.2100000001778,\"pid\":318,\"ramUsage\":2.45,\"server\":\"pserv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-12\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"74.5.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[90018,38,82,46]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1655.016132059342,\"onlineMoneyMade\":90018,\"onlineRunningTime\":1373.2100000001753,\"pid\":320,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1586222,226,130,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1268.067431459327,\"onlineMoneyMade\":1586222,\"onlineRunningTime\":1373.2100000001753,\"pid\":321,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1279596,48,176,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1835.196271864435,\"onlineMoneyMade\":1279596,\"onlineRunningTime\":1373.2100000001753,\"pid\":322,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[142536,28,162,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1559.9168310847685,\"onlineMoneyMade\":142536,\"onlineRunningTime\":1373.2100000001753,\"pid\":323,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[176968,36,90,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1622.715899050872,\"onlineMoneyMade\":176968,\"onlineRunningTime\":1373.2100000001753,\"pid\":324,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[195324,42,76,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1236.2771106949306,\"onlineMoneyMade\":195324,\"onlineRunningTime\":1373.2100000001753,\"pid\":325,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[268834,50,58,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1136.577343703404,\"onlineMoneyMade\":268834,\"onlineRunningTime\":1373.2100000001753,\"pid\":326,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[92840,22,48,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1052.397203898323,\"onlineMoneyMade\":92840,\"onlineRunningTime\":1373.2100000001753,\"pid\":327,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[61852,16,36,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":789.297902923742,\"onlineMoneyMade\":61852,\"onlineRunningTime\":1373.2100000001753,\"pid\":328,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[76762,18,44,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":638.0785087457714,\"onlineMoneyMade\":76762,\"onlineRunningTime\":1373.2100000001753,\"pid\":329,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,30,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":508.1986019491609,\"onlineMoneyMade\":0,\"onlineRunningTime\":1373.2100000001753,\"pid\":330,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,268,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":231,\"onlineMoneyMade\":0,\"onlineRunningTime\":1373.2100000001753,\"pid\":331,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[649637,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169.58902582775704,\"onlineMoneyMade\":649637,\"onlineRunningTime\":1373.2100000001753,\"pid\":332,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1064489,35,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592.8983689406875,\"onlineMoneyMade\":1064489,\"onlineRunningTime\":1373.2100000001753,\"pid\":333,\"ramUsage\":2.45,\"server\":\"pserv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-13\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"94.0.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[186540,76,160,92]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3270.1523573220734,\"onlineMoneyMade\":186540,\"onlineRunningTime\":1362.2100000001728,\"pid\":335,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3310752,480,248,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2591.5695047310837,\"onlineMoneyMade\":3310752,\"onlineRunningTime\":1362.2100000001728,\"pid\":336,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1859172,92,348,32]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3609.219334666722,\"onlineMoneyMade\":1859172,\"onlineRunningTime\":1362.2100000001728,\"pid\":337,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[251792,52,320,28]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3058.660453107389,\"onlineMoneyMade\":251792,\"onlineRunningTime\":1362.2100000001728,\"pid\":338,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[363676,76,176,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3245.431798101744,\"onlineMoneyMade\":363676,\"onlineRunningTime\":1362.2100000001728,\"pid\":339,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[290768,64,156,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2313.0345942034187,\"onlineMoneyMade\":290768,\"onlineRunningTime\":1362.2100000001728,\"pid\":340,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[474340,92,116,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2193.394873813587,\"onlineMoneyMade\":474340,\"onlineRunningTime\":1362.2100000001728,\"pid\":341,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[133128,32,96,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1929.3948738135919,\"onlineMoneyMade\":133128,\"onlineRunningTime\":1362.2100000001728,\"pid\":342,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[125228,32,72,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1578.595805847484,\"onlineMoneyMade\":125228,\"onlineRunningTime\":1362.2100000001728,\"pid\":343,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[197516,48,84,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1355.916831084764,\"onlineMoneyMade\":197516,\"onlineRunningTime\":1362.2100000001728,\"pid\":344,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[41252,12,56,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1151.9168310847647,\"onlineMoneyMade\":41252,\"onlineRunningTime\":1362.2100000001728,\"pid\":345,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,528,0,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":456,\"onlineMoneyMade\":0,\"onlineRunningTime\":1362.2100000001728,\"pid\":346,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[783154,7,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":183.33948738135896,\"onlineMoneyMade\":783154,\"onlineRunningTime\":1362.2100000001728,\"pid\":347,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1040645,34,1,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592.8983689406875,\"onlineMoneyMade\":1040645,\"onlineRunningTime\":1362.2100000001728,\"pid\":348,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[547534,35,10,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":553.1986019491609,\"onlineMoneyMade\":547534,\"onlineRunningTime\":1362.2100000001728,\"pid\":349,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1362.2100000001728,\"pid\":350,\"ramUsage\":2.45,\"server\":\"pserv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-14\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"0.5.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[299792,88,152,92]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3310.032264118684,\"onlineMoneyMade\":299792,\"onlineRunningTime\":1351.2100000001703,\"pid\":352,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3290448,468,248,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2549.9935233717615,\"onlineMoneyMade\":3290448,\"onlineRunningTime\":1351.2100000001703,\"pid\":353,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1309520,88,348,32]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3578.6327301356478,\"onlineMoneyMade\":1309520,\"onlineRunningTime\":1351.2100000001703,\"pid\":354,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[210708,44,312,36]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2997.487244045241,\"onlineMoneyMade\":210708,\"onlineRunningTime\":1351.2100000001703,\"pid\":355,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[281528,60,172,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3048.7389618531533,\"onlineMoneyMade\":281528,\"onlineRunningTime\":1351.2100000001703,\"pid\":356,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[165760,36,164,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2113.6350602203656,\"onlineMoneyMade\":165760,\"onlineRunningTime\":1351.2100000001703,\"pid\":357,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[438120,88,116,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2153.5149670169762,\"onlineMoneyMade\":438120,\"onlineRunningTime\":1351.2100000001703,\"pid\":358,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[85456,20,100,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1812.4618511582225,\"onlineMoneyMade\":85456,\"onlineRunningTime\":1351.2100000001703,\"pid\":359,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[152352,40,68,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1637.0623171751686,\"onlineMoneyMade\":152352,\"onlineRunningTime\":1351.2100000001703,\"pid\":360,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[158924,40,84,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1276.1570174915428,\"onlineMoneyMade\":158924,\"onlineRunningTime\":1351.2100000001703,\"pid\":361,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[27188,8,56,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1084.1570174915432,\"onlineMoneyMade\":27188,\"onlineRunningTime\":1351.2100000001703,\"pid\":362,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,524,0,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":453,\"onlineMoneyMade\":0,\"onlineRunningTime\":1351.2100000001703,\"pid\":363,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[680925,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169.58902582775704,\"onlineMoneyMade\":680925,\"onlineRunningTime\":1351.2100000001703,\"pid\":364,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[1020332,34,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":575.9584155423822,\"onlineMoneyMade\":1020332,\"onlineRunningTime\":1351.2100000001703,\"pid\":365,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[496970,31,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":516.3186951525502,\"onlineMoneyMade\":496970,\"onlineRunningTime\":1351.2100000001703,\"pid\":366,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1351.2100000001703,\"pid\":367,\"ramUsage\":2.45,\"server\":\"pserv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-15\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"17.0.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[161480,46,74,46]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1655.016132059342,\"onlineMoneyMade\":161480,\"onlineRunningTime\":1340.2100000001678,\"pid\":369,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1485324,216,128,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1226.4914501000048,\"onlineMoneyMade\":1485324,\"onlineRunningTime\":1340.2100000001678,\"pid\":370,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[438430,38,174,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1743.4364582712128,\"onlineMoneyMade\":438430,\"onlineRunningTime\":1340.2100000001678,\"pid\":371,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[144666,30,156,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1529.3302265536945,\"onlineMoneyMade\":144666,\"onlineRunningTime\":1340.2100000001678,\"pid\":372,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[209876,46,84,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1671.8891081130196,\"onlineMoneyMade\":209876,\"onlineRunningTime\":1340.2100000001678,\"pid\":373,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[123572,28,78,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1116.6373903050987,\"onlineMoneyMade\":123572,\"onlineRunningTime\":1340.2100000001678,\"pid\":374,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[225746,48,56,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1096.6974369067934,\"onlineMoneyMade\":225746,\"onlineRunningTime\":1340.2100000001678,\"pid\":375,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[49514,12,48,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":906.2309255791113,\"onlineMoneyMade\":49514,\"onlineRunningTime\":1340.2100000001678,\"pid\":376,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[77646,20,34,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":818.5311585875843,\"onlineMoneyMade\":77646,\"onlineRunningTime\":1340.2100000001678,\"pid\":377,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[103048,26,40,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":677.958415542382,\"onlineMoneyMade\":103048,\"onlineRunningTime\":1340.2100000001678,\"pid\":378,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[13676,4,28,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":13676,\"onlineRunningTime\":1340.2100000001678,\"pid\":379,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,258,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":223.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1340.2100000001678,\"pid\":380,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[350279,3,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":128.3376411669513,\"onlineMoneyMade\":350279,\"onlineRunningTime\":1340.2100000001678,\"pid\":381,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[964827,34,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":575.9584155423822,\"onlineMoneyMade\":964827,\"onlineRunningTime\":1340.2100000001678,\"pid\":382,\"ramUsage\":2.45,\"server\":\"pserv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-16\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"33.0.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[243516,80,148,92]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3190.392543728852,\"onlineMoneyMade\":243516,\"onlineRunningTime\":1329.2100000001653,\"pid\":384,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3285788,472,240,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2536.134862918654,\"onlineMoneyMade\":3285788,\"onlineRunningTime\":1329.2100000001653,\"pid\":385,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[573188,64,352,28]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3395.1131029492035,\"onlineMoneyMade\":573188,\"onlineRunningTime\":1329.2100000001653,\"pid\":386,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[157604,32,320,28]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2905.727430452019,\"onlineMoneyMade\":157604,\"onlineRunningTime\":1329.2100000001653,\"pid\":387,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[200916,44,176,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2901.2193346667104,\"onlineMoneyMade\":200916,\"onlineRunningTime\":1329.2100000001653,\"pid\":388,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[217868,48,160,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2193.394873813587,\"onlineMoneyMade\":217868,\"onlineRunningTime\":1329.2100000001653,\"pid\":389,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[386432,84,116,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2113.6350602203656,\"onlineMoneyMade\":386432,\"onlineRunningTime\":1329.2100000001653,\"pid\":390,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[51520,12,100,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1695.5288285028532,\"onlineMoneyMade\":51520,\"onlineRunningTime\":1329.2100000001653,\"pid\":391,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[109716,28,68,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1461.6627831921146,\"onlineMoneyMade\":109716,\"onlineRunningTime\":1329.2100000001653,\"pid\":392,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[143592,36,84,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1236.2771106949322,\"onlineMoneyMade\":143592,\"onlineRunningTime\":1329.2100000001653,\"pid\":393,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[13784,4,56,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1016.3972038983218,\"onlineMoneyMade\":13784,\"onlineRunningTime\":1329.2100000001653,\"pid\":394,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,512,0,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":444,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.2100000001653,\"pid\":395,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[642943,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169.58902582775704,\"onlineMoneyMade\":642943,\"onlineRunningTime\":1329.2100000001653,\"pid\":396,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[942131,33,1,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":575.9584155423822,\"onlineMoneyMade\":942131,\"onlineRunningTime\":1329.2100000001653,\"pid\":397,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[460578,33,10,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":528.6119974180871,\"onlineMoneyMade\":460578,\"onlineRunningTime\":1329.2100000001653,\"pid\":398,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1329.2100000001653,\"pid\":399,\"ramUsage\":2.45,\"server\":\"pserv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-17\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"43.0.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[140574,42,76,44]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1615.1362252627314,\"onlineMoneyMade\":140574,\"onlineRunningTime\":1318.2100000001628,\"pid\":401,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1525512,224,120,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1233.4207803265585,\"onlineMoneyMade\":1525512,\"onlineRunningTime\":1318.2100000001628,\"pid\":402,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[176562,24,178,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1651.6766446779907,\"onlineMoneyMade\":176562,\"onlineRunningTime\":1318.2100000001628,\"pid\":403,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[97918,20,154,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1452.8637152260094,\"onlineMoneyMade\":97918,\"onlineRunningTime\":1318.2100000001628,\"pid\":404,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[153284,34,86,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1548.9560854576505,\"onlineMoneyMade\":153284,\"onlineRunningTime\":1318.2100000001628,\"pid\":405,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[96274,22,78,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1056.8175301101828,\"onlineMoneyMade\":96274,\"onlineRunningTime\":1318.2100000001628,\"pid\":406,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[179976,40,58,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1036.8775767118775,\"onlineMoneyMade\":179976,\"onlineRunningTime\":1318.2100000001628,\"pid\":407,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[83380,20,46,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":993.9306925706383,\"onlineMoneyMade\":83380,\"onlineRunningTime\":1318.2100000001628,\"pid\":408,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[38268,10,36,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":701.598135932215,\"onlineMoneyMade\":38268,\"onlineRunningTime\":1318.2100000001628,\"pid\":409,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[69398,18,42,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":618.1385553474661,\"onlineMoneyMade\":69398,\"onlineRunningTime\":1318.2100000001628,\"pid\":410,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[6358,2,28,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":508.1986019491609,\"onlineMoneyMade\":6358,\"onlineRunningTime\":1318.2100000001628,\"pid\":411,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,252,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":219,\"onlineMoneyMade\":0,\"onlineRunningTime\":1318.2100000001628,\"pid\":412,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[676479,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":676479,\"onlineRunningTime\":1318.2100000001628,\"pid\":413,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[922699,33,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":559.0184621440769,\"onlineMoneyMade\":922699,\"onlineRunningTime\":1318.2100000001628,\"pid\":414,\"ramUsage\":2.45,\"server\":\"pserv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-18\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"17.0.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[344568,104,144,88]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3349.9121709152946,\"onlineMoneyMade\":344568,\"onlineRunningTime\":1307.2100000001603,\"pid\":416,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[3248216,464,236,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2494.558881559332,\"onlineMoneyMade\":3248216,\"onlineRunningTime\":1307.2100000001603,\"pid\":417,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[192216,32,352,32]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3181.006871231685,\"onlineMoneyMade\":192216,\"onlineRunningTime\":1307.2100000001603,\"pid\":418,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[196952,40,312,28]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2905.727430452019,\"onlineMoneyMade\":196952,\"onlineRunningTime\":1307.2100000001603,\"pid\":419,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[205488,44,172,16]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2852.046125604563,\"onlineMoneyMade\":205488,\"onlineRunningTime\":1307.2100000001603,\"pid\":420,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[233892,52,152,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2153.5149670169762,\"onlineMoneyMade\":233892,\"onlineRunningTime\":1307.2100000001603,\"pid\":421,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[289528,64,120,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1954.1154330339232,\"onlineMoneyMade\":289528,\"onlineRunningTime\":1307.2100000001603,\"pid\":422,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[98804,24,88,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1753.995339830538,\"onlineMoneyMade\":98804,\"onlineRunningTime\":1307.2100000001603,\"pid\":423,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[172136,44,64,4]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1637.0623171751686,\"onlineMoneyMade\":172136,\"onlineRunningTime\":1307.2100000001603,\"pid\":424,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[157360,40,76,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1236.2771106949322,\"onlineMoneyMade\":157360,\"onlineRunningTime\":1307.2100000001603,\"pid\":425,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,56,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":948.6373903051003,\"onlineMoneyMade\":0,\"onlineRunningTime\":1307.2100000001603,\"pid\":426,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,500,0,20]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":435,\"onlineMoneyMade\":0,\"onlineRunningTime\":1307.2100000001603,\"pid\":427,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[672389,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":672389,\"onlineRunningTime\":1307.2100000001603,\"pid\":428,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[872081,33,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":559.0184621440769,\"onlineMoneyMade\":872081,\"onlineRunningTime\":1307.2100000001603,\"pid\":429,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[402444,29,11,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":491.73209062147635,\"onlineMoneyMade\":402444,\"onlineRunningTime\":1307.2100000001603,\"pid\":430,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,1]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22.980599870904353,\"onlineMoneyMade\":0,\"onlineRunningTime\":1307.2100000001603,\"pid\":431,\"ramUsage\":2.45,\"server\":\"pserv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-19\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"98.3.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[89614,36,70,48]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1535.3764116695102,\"onlineMoneyMade\":89614,\"onlineRunningTime\":1296.2100000001578,\"pid\":434,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1537506,226,118,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1226.4914501000048,\"onlineMoneyMade\":1537506,\"onlineRunningTime\":1296.2100000001578,\"pid\":435,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[78442,16,176,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1575.2101333503056,\"onlineMoneyMade\":78442,\"onlineRunningTime\":1296.2100000001578,\"pid\":436,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[98564,20,156,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1437.5704129604724,\"onlineMoneyMade\":98564,\"onlineRunningTime\":1296.2100000001578,\"pid\":437,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[109312,24,86,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1426.0230628022814,\"onlineMoneyMade\":109312,\"onlineRunningTime\":1296.2100000001578,\"pid\":438,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[106246,24,76,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1056.8175301101828,\"onlineMoneyMade\":106246,\"onlineRunningTime\":1296.2100000001578,\"pid\":439,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[155166,36,54,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.0577165169616,\"onlineMoneyMade\":155166,\"onlineRunningTime\":1296.2100000001578,\"pid\":440,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[84424,20,44,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":964.6974369067959,\"onlineMoneyMade\":84424,\"onlineRunningTime\":1296.2100000001578,\"pid\":441,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[52728,14,34,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":730.8313915960573,\"onlineMoneyMade\":52728,\"onlineRunningTime\":1296.2100000001578,\"pid\":442,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[79680,20,40,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":618.1385553474661,\"onlineMoneyMade\":79680,\"onlineRunningTime\":1296.2100000001578,\"pid\":443,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,28,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":474.31869515255016,\"onlineMoneyMade\":0,\"onlineRunningTime\":1296.2100000001578,\"pid\":444,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,246,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":214.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1296.2100000001578,\"pid\":445,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[647956,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":647956,\"onlineRunningTime\":1296.2100000001578,\"pid\":446,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[850834,32,1,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":559.0184621440769,\"onlineMoneyMade\":850834,\"onlineRunningTime\":1296.2100000001578,\"pid\":447,\"ramUsage\":2.45,\"server\":\"pserv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-20\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"0.7.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[170634,44,72,44]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1595.196271864426,\"onlineMoneyMade\":170634,\"onlineRunningTime\":1285.2100000001553,\"pid\":449,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1584012,228,116,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1226.4914501000048,\"onlineMoneyMade\":1584012,\"onlineRunningTime\":1285.2100000001553,\"pid\":450,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[67270,14,170,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1544.6235288192315,\"onlineMoneyMade\":67270,\"onlineRunningTime\":1285.2100000001553,\"pid\":451,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[78420,16,156,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1406.9838084293983,\"onlineMoneyMade\":78420,\"onlineRunningTime\":1285.2100000001553,\"pid\":452,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[162948,36,80,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1524.3694809265767,\"onlineMoneyMade\":162948,\"onlineRunningTime\":1285.2100000001553,\"pid\":453,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[90228,20,78,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1036.8775767118775,\"onlineMoneyMade\":90228,\"onlineRunningTime\":1285.2100000001553,\"pid\":454,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[140232,32,58,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":957.1177631186563,\"onlineMoneyMade\":140232,\"onlineRunningTime\":1285.2100000001553,\"pid\":455,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[24786,6,48,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":818.5311585875843,\"onlineMoneyMade\":24786,\"onlineRunningTime\":1285.2100000001553,\"pid\":456,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[54442,14,34,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":730.8313915960573,\"onlineMoneyMade\":54442,\"onlineRunningTime\":1285.2100000001553,\"pid\":457,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[46476,12,42,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":558.3186951525502,\"onlineMoneyMade\":46476,\"onlineRunningTime\":1285.2100000001553,\"pid\":458,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[20950,6,26,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":20950,\"onlineRunningTime\":1285.2100000001553,\"pid\":459,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,244,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":213,\"onlineMoneyMade\":0,\"onlineRunningTime\":1285.2100000001553,\"pid\":460,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[643593,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":643593,\"onlineRunningTime\":1285.2100000001553,\"pid\":461,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[832637,32,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":832637,\"onlineRunningTime\":1285.2100000001553,\"pid\":462,\"ramUsage\":2.45,\"server\":\"pserv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-21\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"96.3.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[181564,42,72,44]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1575.2563184661208,\"onlineMoneyMade\":181564,\"onlineRunningTime\":1274.2100000001528,\"pid\":464,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1503910,222,116,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1205.7034594203437,\"onlineMoneyMade\":1503910,\"onlineRunningTime\":1274.2100000001528,\"pid\":465,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[59044,12,174,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1529.3302265536945,\"onlineMoneyMade\":59044,\"onlineRunningTime\":1274.2100000001528,\"pid\":466,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[89146,18,154,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1406.9838084293983,\"onlineMoneyMade\":89146,\"onlineRunningTime\":1274.2100000001528,\"pid\":467,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[125424,28,84,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1450.6096673333552,\"onlineMoneyMade\":125424,\"onlineRunningTime\":1274.2100000001528,\"pid\":468,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[107504,24,76,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1056.8175301101828,\"onlineMoneyMade\":107504,\"onlineRunningTime\":1274.2100000001528,\"pid\":469,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[104230,24,60,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.2979029237404,\"onlineMoneyMade\":104230,\"onlineRunningTime\":1274.2100000001528,\"pid\":470,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[58014,14,46,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":906.2309255791113,\"onlineMoneyMade\":58014,\"onlineRunningTime\":1274.2100000001528,\"pid\":471,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[53964,14,32,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":701.598135932215,\"onlineMoneyMade\":53964,\"onlineRunningTime\":1274.2100000001528,\"pid\":472,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[112586,28,36,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":658.0184621440767,\"onlineMoneyMade\":112586,\"onlineRunningTime\":1274.2100000001528,\"pid\":473,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[13806,4,26,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":508.1986019491609,\"onlineMoneyMade\":13806,\"onlineRunningTime\":1274.2100000001528,\"pid\":474,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,242,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":211.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1274.2100000001528,\"pid\":475,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[640449,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":640449,\"onlineRunningTime\":1274.2100000001528,\"pid\":476,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[786671,32,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":786671,\"onlineRunningTime\":1274.2100000001528,\"pid\":477,\"ramUsage\":2.45,\"server\":\"pserv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-22\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"91.6.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[156158,36,76,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1535.3764116695102,\"onlineMoneyMade\":156158,\"onlineRunningTime\":1263.2100000001503,\"pid\":478,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1538210,224,114,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1205.7034594203437,\"onlineMoneyMade\":1538210,\"onlineRunningTime\":1263.2100000001503,\"pid\":479,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48784,10,168,18]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1498.7436220226205,\"onlineMoneyMade\":48784,\"onlineRunningTime\":1263.2100000001503,\"pid\":480,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[88838,18,150,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1391.6905061638613,\"onlineMoneyMade\":88838,\"onlineRunningTime\":1263.2100000001503,\"pid\":481,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[119222,26,80,8]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1401.4364582712076,\"onlineMoneyMade\":119222,\"onlineRunningTime\":1263.2100000001503,\"pid\":482,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[97362,22,74,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1016.9376233135722,\"onlineMoneyMade\":97362,\"onlineRunningTime\":1263.2100000001503,\"pid\":483,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[158382,36,56,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.0577165169616,\"onlineMoneyMade\":158382,\"onlineRunningTime\":1263.2100000001503,\"pid\":484,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[50368,12,46,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":876.997669915269,\"onlineMoneyMade\":50368,\"onlineRunningTime\":1263.2100000001503,\"pid\":485,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[37956,10,34,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":672.3648802683726,\"onlineMoneyMade\":37956,\"onlineRunningTime\":1263.2100000001503,\"pid\":486,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[63914,16,40,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":578.2586485508555,\"onlineMoneyMade\":63914,\"onlineRunningTime\":1263.2100000001503,\"pid\":487,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[12914,4,26,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":508.1986019491609,\"onlineMoneyMade\":12914,\"onlineRunningTime\":1263.2100000001503,\"pid\":488,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,238,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":208.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1263.2100000001503,\"pid\":489,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[508754,5,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151.25507708962115,\"onlineMoneyMade\":508754,\"onlineRunningTime\":1263.2100000001503,\"pid\":490,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[767505,32,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":542.0785087457716,\"onlineMoneyMade\":767505,\"onlineRunningTime\":1263.2100000001503,\"pid\":491,\"ramUsage\":2.45,\"server\":\"pserv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-23\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"96.6.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[100300,34,74,42]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1495.4965048728995,\"onlineMoneyMade\":100300,\"onlineRunningTime\":1252.2100000001478,\"pid\":492,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1417712,206,118,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157.1981478344678,\"onlineMoneyMade\":1417712,\"onlineRunningTime\":1252.2100000001478,\"pid\":493,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[39692,8,172,14]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1483.4503197570834,\"onlineMoneyMade\":39692,\"onlineRunningTime\":1252.2100000001478,\"pid\":494,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[136938,28,148,12]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1437.5704129604724,\"onlineMoneyMade\":136938,\"onlineRunningTime\":1252.2100000001478,\"pid\":495,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[163380,36,80,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.7828763955029,\"onlineMoneyMade\":163380,\"onlineRunningTime\":1252.2100000001478,\"pid\":496,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[63054,14,76,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":957.1177631186563,\"onlineMoneyMade\":63054,\"onlineRunningTime\":1252.2100000001478,\"pid\":497,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[167776,38,54,6]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.0577165169616,\"onlineMoneyMade\":167776,\"onlineRunningTime\":1252.2100000001478,\"pid\":498,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[59190,14,44,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":876.997669915269,\"onlineMoneyMade\":59190,\"onlineRunningTime\":1252.2100000001478,\"pid\":499,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[62500,16,32,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":730.8313915960573,\"onlineMoneyMade\":62500,\"onlineRunningTime\":1252.2100000001478,\"pid\":500,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[47124,12,40,2]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":538.3787417542449,\"onlineMoneyMade\":47124,\"onlineRunningTime\":1252.2100000001478,\"pid\":501,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[7130,2,26,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":474.31869515255016,\"onlineMoneyMade\":7130,\"onlineRunningTime\":1252.2100000001478,\"pid\":502,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,236,0,10]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":207,\"onlineMoneyMade\":0,\"onlineRunningTime\":1252.2100000001478,\"pid\":503,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":2,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[630074,6,0,3]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.00553864322308,\"onlineMoneyMade\":630074,\"onlineRunningTime\":1252.2100000001478,\"pid\":504,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[747974,31,0,0]},\"filename\":\"autoHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":525.1385553474663,\"onlineMoneyMade\":747974,\"onlineRunningTime\":1252.2100000001478,\"pid\":505,\"ramUsage\":2.45,\"server\":\"pserv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n/* \\nName: autoHack.js\\nLast updated: 2022-01-02 02:15\\n*/\\nexport async function main(ns) {\\n\\tlet moneyThresh = 1000000;\\n\\tlet vers = \\\"v1\\\";\\n\\tlet host = ns.getHostname();\\n\\tlet target = host;\\n\\tif (ns.args.length > 0) {\\n\\t\\ttarget = ns.args[0];\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target);\\n\\n\\tlet myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet serverThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tif(myMoney < moneyThresh)\\n\\t{\\n\\t\\tmoneyThresh = myMoney;\\n\\t}\\n\\telse if(myMoney > serverThresh)\\n\\t{\\n\\t\\tmoneyThresh = serverThresh;\\n\\t}\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": moneyTresh: \\\" + moneyThresh);\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": securityThresh: \\\" + securityThresh);\\n\\n\\twhile (true) {\\n\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": target: \\\" + target + \\\"; $\\\" + ns.getServerMoneyAvailable(target) + \\\" ; security: \\\" + ns.getServerMinSecurityLevel(target));\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": security level (\\\" + ns.getServerSecurityLevel(target) + \\\") > securityThresh(\\\" + securityThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": running weaken\\\");\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": money available (\\\" + ns.getServerMoneyAvailable(target) + \\\") < moneyThresh(\\\" + moneyThresh + \\\")\\\");\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": grow \\\" + target);\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tns.print(vers + \\\"|\\\" + host + \\\"|\\\" + Date.now() + \\\": hacking \\\" + target + \\\"($\\\" + ns.getServerMoneyAvailable(target) + \\\")\\\");\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autoHack.js\",\"url\":\"blob:file:///1914ec78-b194-4e0b-a3e8-9d782c687d0f\"}],\"ramUsage\":2.45,\"server\":\"pserv-24\",\"_hash\":\"c683346f1fb81c6d28ca083c152c3c1d91fefab8d02f34af1f23c62d38bc0955\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":17,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":15,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":128.668,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":130.1564,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":152.2949,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":24148.67137364786}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":103.7811,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":117.2368,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12982.250422283088,\"lastPrice\":12993.65666013146,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":18.328482534621486,\"otlkMagForecast\":32.601313382832785,\"cap\":51502365,\"spreadPerc\":0.1,\"shareTxForMovement\":50266,\"shareTxUntilMovement\":50266,\"totalShares\":115200000,\"maxShares\":23000000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":42177.31658329506,\"lastPrice\":42211.903206556264,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.35288989344872,\"otlkMagForecast\":31.67382074870449,\"cap\":434424833,\"spreadPerc\":0.3,\"shareTxForMovement\":55287,\"shareTxUntilMovement\":55287,\"totalShares\":87900000,\"maxShares\":17600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":26320.067717060174,\"lastPrice\":26283.632307203898,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":13.018519014776114,\"otlkMagForecast\":35.95033551260149,\"cap\":188452019,\"spreadPerc\":0.6,\"shareTxForMovement\":57895,\"shareTxUntilMovement\":57895,\"totalShares\":89400000,\"maxShares\":17900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11682.967136240819,\"lastPrice\":11668.159162735645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":12.347204872918699,\"otlkMagForecast\":62.031134578781774,\"cap\":49017401,\"spreadPerc\":0.1,\"shareTxForMovement\":55090,\"shareTxUntilMovement\":55090,\"totalShares\":83600000,\"maxShares\":16700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":16108.87528336327,\"lastPrice\":16086.889090409059,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":18.508752479373264,\"otlkMagForecast\":66.7909990783896,\"cap\":391347626,\"spreadPerc\":0.6,\"shareTxForMovement\":88268,\"shareTxUntilMovement\":88268,\"totalShares\":54400000,\"maxShares\":10900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":81896.43419258801,\"lastPrice\":81727.29163246082,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":10.931246690181755,\"otlkMagForecast\":37.54245487864285,\"cap\":1486250857,\"spreadPerc\":0.2,\"shareTxForMovement\":76452,\"shareTxUntilMovement\":76452,\"totalShares\":30100000,\"maxShares\":6000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":20869.74504066669,\"lastPrice\":20837.604379452972,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":10.49880183886249,\"otlkMagForecast\":39.42244014047892,\"cap\":125822599,\"spreadPerc\":0.1,\"shareTxForMovement\":69020,\"shareTxUntilMovement\":69020,\"totalShares\":76200000,\"maxShares\":15200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":170082.3907240118,\"lastPrice\":169681.5241408878,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":22.219552683539433,\"otlkMagForecast\":30.88380626564639,\"cap\":747791568,\"spreadPerc\":0.2,\"shareTxForMovement\":56703,\"shareTxUntilMovement\":56703,\"totalShares\":55700000,\"maxShares\":11100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":19078.547293525127,\"lastPrice\":19109.464719011095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":7.3568016877006635,\"otlkMagForecast\":42.16190815985354,\"cap\":150441026,\"spreadPerc\":0.2,\"shareTxForMovement\":69975,\"shareTxUntilMovement\":69975,\"totalShares\":58100000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":10252.318217964294,\"lastPrice\":10238.724611209967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":8.858668263905994,\"otlkMagForecast\":39.362180177061056,\"cap\":110383061,\"spreadPerc\":0.4,\"shareTxForMovement\":80826,\"shareTxUntilMovement\":80826,\"totalShares\":114000000,\"maxShares\":22800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":17634.551075686893,\"lastPrice\":17612.88645885577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.235603765684274,\"otlkMagForecast\":56.75493472333497,\"cap\":120458621,\"spreadPerc\":0.8,\"shareTxForMovement\":84055,\"shareTxUntilMovement\":84055,\"totalShares\":46900000,\"maxShares\":9400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":6129.892909785203,\"lastPrice\":6138.270726499532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.47216060182183,\"otlkMagForecast\":57.397032695097536,\"cap\":53024513,\"spreadPerc\":1,\"shareTxForMovement\":92612,\"shareTxUntilMovement\":92612,\"totalShares\":107300000,\"maxShares\":21500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":11333.115384108596,\"lastPrice\":11318.088742274262,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":8.320684828936031,\"otlkMagForecast\":57.739954423931124,\"cap\":98081639,\"spreadPerc\":0.4,\"shareTxForMovement\":56666,\"shareTxUntilMovement\":56666,\"totalShares\":57600000,\"maxShares\":11500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":17921.286608687,\"lastPrice\":17900.316924104212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.539982523172347,\"otlkMagForecast\":39.744341343689186,\"cap\":398512636,\"spreadPerc\":0.8,\"shareTxForMovement\":59826,\"shareTxUntilMovement\":59826,\"totalShares\":34000000,\"maxShares\":6800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18159.94617894156,\"lastPrice\":18140.112287790627,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":5.790810180605224,\"otlkMagForecast\":43.01762947399403,\"cap\":174158912,\"spreadPerc\":0.8,\"shareTxForMovement\":91073,\"shareTxUntilMovement\":91073,\"totalShares\":45500000,\"maxShares\":9100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":15680.5899923464,\"lastPrice\":15702.020890220441,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":1.4268515383878129,\"otlkMagForecast\":46.648355476833146,\"cap\":190094812,\"spreadPerc\":0.5,\"shareTxForMovement\":110039,\"shareTxUntilMovement\":110039,\"totalShares\":49800000,\"maxShares\":10000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":9047.362696046499,\"lastPrice\":9060.611088717884,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":9.994985689580641,\"otlkMagForecast\":59.26713958260786,\"cap\":91517094,\"spreadPerc\":0.8,\"shareTxForMovement\":76565,\"shareTxUntilMovement\":76565,\"totalShares\":48900000,\"maxShares\":9800000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16488.39663855761,\"lastPrice\":16508.034228563607,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":10.488412615497733,\"otlkMagForecast\":59.608228819318796,\"cap\":225884719,\"spreadPerc\":1,\"shareTxForMovement\":109074,\"shareTxUntilMovement\":109074,\"totalShares\":38600000,\"maxShares\":7700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":25937.412309260453,\"lastPrice\":25900.49662871547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":5.155730364261189,\"otlkMagForecast\":43.56738729105728,\"cap\":435974294,\"spreadPerc\":0.8,\"shareTxForMovement\":80076,\"shareTxUntilMovement\":80076,\"totalShares\":24800000,\"maxShares\":5000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":7361.417843663315,\"lastPrice\":7325.375719963087,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":true,\"otlkMag\":6.943444204117048,\"otlkMagForecast\":54.99577441792884,\"cap\":99427026,\"spreadPerc\":0.9,\"shareTxForMovement\":26338,\"shareTxUntilMovement\":26338,\"totalShares\":89800000,\"maxShares\":18000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":9292.914536083637,\"lastPrice\":9316.683112233115,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":5.642331158770801,\"otlkMagForecast\":49.504549849294634,\"cap\":150139029,\"spreadPerc\":1.1,\"shareTxForMovement\":53771,\"shareTxUntilMovement\":53771,\"totalShares\":45100000,\"maxShares\":9000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2718.913604961078,\"lastPrice\":2716.1559623909993,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":5.1444909789346855,\"otlkMagForecast\":47.177822637437686,\"cap\":47321577,\"spreadPerc\":0.6,\"shareTxForMovement\":86616,\"shareTxUntilMovement\":86616,\"totalShares\":55800000,\"maxShares\":11200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":4975.62335466986,\"lastPrice\":4958.1982130256765,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.8,\"b\":false,\"otlkMag\":6.483255284901661,\"otlkMagForecast\":40.27975299591912,\"cap\":152063745,\"spreadPerc\":1.3,\"shareTxForMovement\":42479,\"shareTxUntilMovement\":42479,\"totalShares\":39000000,\"maxShares\":7800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":11007.15032815503,\"lastPrice\":11041.75069483567,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.61,\"b\":false,\"otlkMag\":6.09171957317049,\"otlkMagForecast\":45.53618961248244,\"cap\":76314162,\"spreadPerc\":0.6,\"shareTxForMovement\":73309,\"shareTxUntilMovement\":73309,\"totalShares\":65500000,\"maxShares\":13100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1350.2313938299635,\"lastPrice\":1347.6790560976513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":false,\"otlkMag\":2.101957169390554,\"otlkMagForecast\":49.26847658275186,\"cap\":41518502,\"spreadPerc\":1,\"shareTxForMovement\":80963,\"shareTxUntilMovement\":80963,\"totalShares\":97300000,\"maxShares\":19500000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":12501.89746360433,\"lastPrice\":12576.345920318774,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.05,\"b\":true,\"otlkMag\":8.553642694791105,\"otlkMagForecast\":60.17180391501216,\"cap\":23664216,\"spreadPerc\":0.9,\"shareTxForMovement\":25147,\"shareTxUntilMovement\":25147,\"totalShares\":12000000,\"maxShares\":2400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":13063.793910741198,\"lastPrice\":13091.085763882591,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":9.176762028087154,\"otlkMagForecast\":41.97414992871313,\"cap\":13373113,\"spreadPerc\":1.3,\"shareTxForMovement\":59093,\"shareTxUntilMovement\":59093,\"totalShares\":11700000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":749.6275780161016,\"lastPrice\":748.5314752904011,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.1681772078476484,\"otlkMagForecast\":51.30374755197314,\"cap\":3714738,\"spreadPerc\":0.8,\"shareTxForMovement\":140917,\"shareTxUntilMovement\":140917,\"totalShares\":72000000,\"maxShares\":14400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2224.2035983579044,\"lastPrice\":2232.5414794094145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.92,\"b\":false,\"otlkMag\":5.5810905519568745,\"otlkMagForecast\":46.56969608820387,\"cap\":6659207,\"spreadPerc\":1.1,\"shareTxForMovement\":44830,\"shareTxUntilMovement\":44830,\"totalShares\":11200000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":13956.432884882153,\"lastPrice\":14026.463426018747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":6.03326650980747,\"otlkMagForecast\":45.54471992198074,\"cap\":19546221,\"spreadPerc\":0.7,\"shareTxForMovement\":32305,\"shareTxUntilMovement\":32305,\"totalShares\":32800000,\"maxShares\":6600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":5198.900389957941,\"lastPrice\":5185.637036646073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":13.365220036772119,\"otlkMagForecast\":62.07915227551633,\"cap\":13451022,\"spreadPerc\":0.7,\"shareTxForMovement\":69068,\"shareTxUntilMovement\":69068,\"totalShares\":97400000,\"maxShares\":19500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23023.46018860819,\"lastPrice\":22989.347169425084,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":6.279500797790983,\"otlkMagForecast\":44.03369194738161,\"cap\":89742504,\"spreadPerc\":0.3,\"shareTxForMovement\":147692,\"shareTxUntilMovement\":147692,\"totalShares\":21900000,\"maxShares\":4400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18039.860138557317,\"lastPrice\":18020.86033074477,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":9.663915009431118,\"otlkMagForecast\":39.20257859167496,\"cap\":440587674,\"spreadPerc\":0.3,\"shareTxForMovement\":172112,\"shareTxUntilMovement\":172112,\"totalShares\":21400000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":136577,\"lastUpdate\":1641590596409,\"ticksUntilCycle\":71}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"MM/dd hh:mm:ss\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641458367009","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}